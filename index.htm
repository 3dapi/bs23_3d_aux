<?php
	include '../base/lc_header.php';
	include '../base/lc_util.php';
?>

<!--------------------------- Body Begin ---------------------------------------->

<div class="Section1">

<br>
<h1>◈3D 게임 제작 Auxiliary◈</h1>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>교육기관에서<span lang=EN-US> 3D </span>기초 과정 수업이 끝나고<span
lang=EN-US> 2~3</span>주 정도 시간을 두어 게임 제작 실습을 진행합니다<span lang=EN-US>. 3D </span>기초
과정만으로도 게임 제작이 가능하지만 의외로 작은 부분들에서 시간을 많이 빼앗기거나 또는 코드 몇 줄 더 넣으면 게임 분위기가 확 달라지는 일들이
종종 있습니다<span lang=EN-US>. </span>이 장은<span lang=EN-US> 3D </span>기초 과정을 배우고 게임 제작을
시작하는 분들에게 특별한 주제들을 모아서 도움이 될만한 내용을 모았습니다<span lang=EN-US>. 3D</span>의 전반적인 내용이 아닌
지역적인 내용이 많아 이 장은 넘어가도 상관없습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3.1 </span><span
style='font-size:16.0pt'>포그<span lang=EN-US>(Fog)</span></span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>는<span lang=EN-US> 3D</span>의 현실감<span
lang=EN-US>(Reality)</span>를 높이기 위해서 <span lang=EN-US>Anti-aliasing, </span>범프 매핑<span
lang=EN-US>(Bump Mapping), </span>반사나 굴절에 대한 환경 매핑<span lang=EN-US>(Environment
Mapping), </span>스텐실<span lang=EN-US>, </span>버텍스 블렌딩<span lang=EN-US>(Vertex
Blending), </span>포그<span lang=EN-US>(Fog) </span>등을 지원합니다<span lang=EN-US>. </span>이
중에서 포그는 컴퓨터 그래픽스에서 현실의 안개 효과를 표현한 것입니다<span lang=EN-US>. </span>포그를 적용하면 <span
lang=EN-US>3D </span>장면을 구성하는 가상 카메라에서 멀리 있는 오브젝트는 포그의 색상에 가깝게 만들고 가까울수록 물체를 선명하게
보이게 합니다<span lang=EN-US>. </span>또한 포그를 사용하면 멀리 있는 물체는 디바이스가<span lang=EN-US> '</span>적당히<span
lang=EN-US>' </span>그리게 되어 렌더링 속도가 향상되며 볼륨 체적의<span lang=EN-US> Far </span>평면과의
거리 값보다 작을 때 오브젝트가 갑자기 튀어나오는 현상도 막을 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>는 장면에 포그를 적용하는 정점 포그<span
lang=EN-US>, </span>픽셀 포그 두 가지 방법이 있습니다<span lang=EN-US>. </span>이들 포그는 다음과 같은 선형
계산 공식으로 폴리곤에 적용됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>최종 폴리곤 색상<span lang=EN-US> C = f * </span>폴리곤 색상<span
lang=EN-US> + (1 - f)* </span>포그 색상</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>f</span>는 포그 계수<span lang=EN-US>(Fog
Factor)</span>로 거리의 정도에 따라 계산하는데 다음과 같이 선형 포그<span lang=EN-US>(Linear Fog)</span>와
지수 포그<span lang=EN-US>(Exponential Fog)</span>로 분류 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoTableGrid border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=331 style='width:248.4pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US><img width=300 height=211
  SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image001.jpg"></span></p>
  </td>
  <td width=294 style='width:220.5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US><sub><img width=96 height=41
  SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image002.gif"></sub>&nbsp;(</span>선형포그<span
  lang=EN-US>: D3DFOG_LINEAR)</span></p>
  <p class=MsoNormal><span lang=EN-US><img width=84 height=21
  SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image003.gif">(</span>지수 포그<span lang=EN-US>: D3DFOG_EXP)</span></p>
  <p class=MsoNormal><span lang=EN-US><img width=95 height=24
  SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image004.gif">(</span>지수 포그<span lang=EN-US>: D3DFOG_EXP)</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&lt;</span>포그 공식과 그래프<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>공식의<span lang=EN-US> d</span>는 카메라에서 정점까지 거리이고<span
lang=EN-US> e</span>는 자연 대수<span lang=EN-US>(exponential)</span>입니다<span
lang=EN-US>. start</span>는 선형포그가 적용되는 시작 거리<span lang=EN-US>, end</span>는 포그의 효과가
더 이상 증가하지 않는 최대 거리입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>그래프를 보면 선형 포그는 전체적으로 선형적으로 변화하는 반면에<span lang=EN-US> exp </span>포그는
급격히 변화했다가 천천히 변화하고<span lang=EN-US> exp2 </span>포그는 천천히 변화하다가 급격히 변하는 것을 알 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=181 height=136
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image005.jpg">&nbsp;<img width=182 height=136
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image006.jpg">&nbsp;<img width=182 height=136
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image007.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Linear, Exp, Exp2&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>선형 포그는<span lang=EN-US> end </span>값 이후에는 포그색상이<span
lang=EN-US> 100%</span>적용이 되어 왼쪽처럼 짙은 포그 색상의 띠를 만들기도 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>의 포그는 다음 그림처럼 영역 기반<span
lang=EN-US>(Range-based)</span>를 설정하거나 또는 해제<span lang=EN-US>(Plane-based) </span>할
수 있습니다<span lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US><img width=181 height=136
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image008.jpg">&nbsp;<img width=181 height=136
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image009.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>영역 기반<span lang=EN-US>(Range-based)
</span>포그 설정<span lang=EN-US>, </span>미 지정<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=432 height=155
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image010.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>영역 기반 설정이 안된 포그에서의 오브젝트<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>영역 기반으로 하면 카메라의 회전에도 포그가 자연스럽게 적용이 됩니다<span lang=EN-US>. </span>그러나
영역 기반을 비활성화 하면 카메라와의 거리가 아닌<span lang=EN-US> z </span>값을 가지고 포그계수를 계산하기 때문에 카메라의
회전에 대해서 포그 적용이 될 수도 있고 안될 수도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 포그는 정점 변환과 조명을 적용할 때 포그 또한 적용이 되고<span lang=EN-US>, </span>픽셀
포그는 하드웨어에 따라서 미리 계산 된 참조 테이블을 통해서 픽셀의 깊이 값에 따라 포그가 적용이 됩니다<span lang=EN-US>. </span>이런
이유로 픽셀 포그를 테이블 포그라 하기도 하며 픽셀 포그는 영역 기반 설정이 제대로 안됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>차이가 클 것 같지만 정점 포그와 픽셀 포그는 잘 보지 않으면 장면의 결과에서는 거의 차이가 없습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>포그의 기본적인 내용을 다 살펴 보았고 다음으로 이를 구현 하는 방법입니다<span lang=EN-US>. </span>먼저
다음과 같은 함수를 준비하는 것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>inline</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US> </span><span lang=EN-US style='color:#880000'>FtoDW</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>float</span><span
lang=EN-US>&amp; p) { </span><span lang=EN-US style='color:blue'>return</span><span
lang=EN-US> *((</span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US>*)&amp;p); }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것은<span lang=EN-US> D3D</span>의 상태 값 설정은 거의<span
lang=EN-US> DWORD</span>형으로 되어 있습니다<span lang=EN-US>. </span>그런데 포그는<span
lang=EN-US> FLOAT</span>형을 사용하고 있어서 단순히 자료를 복사하게 되면 제대로 처리가 안되어<span
lang=EN-US> DWORD</span>형으로 자료를 캐스팅 해야만 합니다<span lang=EN-US>. </span>위와 같은 함수를 사용하면
자료의 유실 없이 올바로 넘길 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 다음과 같이 포그의 색상<span lang=EN-US>, </span>시작<span
lang=EN-US>, </span>끝<span lang=EN-US>, </span>밀도<span lang=EN-US>(Density)</span>에
대한 변수를 준비합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp; dFog&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:blue'>D3DXCOLOR</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>7f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0f</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; fStart&nbsp; = </span><span
lang=EN-US style='color:red'>300</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; fEnd&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:red'>700</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; fDens&nbsp;&nbsp; =
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0015f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>게임에서는 주로 선형 포그<span lang=EN-US>(Linear
Fog)</span>를 사용하고 있어서 <span lang=EN-US>EXP</span>에서 사용되는 밀도<span lang=EN-US>(Density)
</span>변수는 거의 설정 안 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>디바이스의 상태 설정 함수<span lang=EN-US>
RenderState()</span>를 이용해서 포그를 활성화합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGENABLE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>TRUE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 포그이면 다음과 같이 픽셀 기반 포그를 막고 정점 포그에<span
lang=EN-US> Linear, Exp, Exp2</span>중 하나를 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGTABLEMODE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DFOG_NONE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGVERTEXMODE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DFOG_</span><span lang=EN-US
style='color:red'>&quot;LINEAR&quot;</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>&quot;EXP&quot;</span><span lang=EN-US>, or</span><span
lang=EN-US style='color:red'>&quot;EXP2&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 포그면 정점 포그를 막고 픽셀 포그 설정을 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGVERTEXMODE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DFOG_NONE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGTABLEMODE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DFOG_</span><span lang=EN-US
style='color:red'>&quot;LINEAR&quot;</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>&quot;EXP&quot;</span><span lang=EN-US>, or</span><span
lang=EN-US style='color:red'>&quot;EXP2&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>마지막으로 포그 변수들과 영역 기반 활성화를 설정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_RANGEFOGENABLE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>&quot;TRUE&quot;</span><span lang=EN-US>?</span><span
lang=EN-US style='color:#A000A0'> </span><span lang=EN-US style='color:red'>&quot;FALSE&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGCOLOR</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:red'>&quot;</span><span style='color:red'>포그
색상<span lang=EN-US>&quot;</span></span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGSTART</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*((</span><span lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>*)(&amp;fStart)));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGEND</span><span lang=EN-US>,&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:#880000'>FtoDW</span><span lang=EN-US>(fEnd));</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGDENSITY</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:#880000'>FtoDW</span><span lang=EN-US>(fDens));</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux01_fog.zip">daux01_fog.zip</a>
</span>의<span lang=EN-US> CMain::Render() </span>함수를 참고 하기 바랍니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3.2 </span><span
style='font-size:16.0pt'>폰트<span lang=EN-US>(Font)</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.2.1 ID3DXFont</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXFont</span>는 아주 쉽게 사용할 수 있는 폰트 출력용 확장 유틸리티입니다<span
lang=EN-US>. </span>일반적으로 윈도우의 폰트를 기본으로 많이 사용합니다<span lang=EN-US>. </span>그런데 때로는
게임에 맞는 폰트를 따로 만들어 사용할 때도 있습니다<span lang=EN-US>. </span>이런 경우 윈도우 폴더에 폰트를 등록해 사용해야
하지만 간단히<span lang=EN-US> Platform SDK </span>함수를 사용해서 프로그램 내부에서만 사용할 수 있는 방법이 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>AddFontResourceEx()/RemoveFontResourceEx() </span>함수는
폰트를 프로그램 내부에서 사용하고 해제 할 때 사용하는 함수입니다<span lang=EN-US>. </span>이 함수는<span
lang=EN-US> Windows 2000 </span>이상에서만 지원이 됩니다<span lang=EN-US>. </span>따라서 <span
lang=EN-US>&quot;windows.h&quot; </span>포함할 때 매크로로 상위버전임을 표시해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>이 함수들을 사용해서<span lang=EN-US> ID3DXFont</span>객체 생성과 해제는 다음과 같이
요약할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>#define </span><span
lang=EN-US style='color:#A000A0'>_WIN32_WINNT</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:red'>0x0500</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>#include </span><span
lang=EN-US style='color:fuchsia'>&lt;windows.h&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// </span><span
style='color:green'>폰트 등록</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#880000'>AddFontResourceEx</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;font/08SeoulNamsanB.ttf&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>FR_NOT_ENUM</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>hr = </span><span lang=EN-US
style='color:#880000'>AddFontResourceEx</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;font/08SeoulHangangM.ttf&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>FR_NOT_ENUM</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// ID3DXFont </span><span style='color:green'>객체 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#880000'>D3DXCreateFont</span><span lang=EN-US>(…, </span><span
lang=EN-US style='color:fuchsia'>&quot;08</span><span style='color:fuchsia'>서울남산체<span
lang=EN-US> B&quot;</span></span><span lang=EN-US>, &amp;m_pDXFont1);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>폰트 해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>RemoveFontResourceEx</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;font/08SeoulNamsanB.ttf&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>FR_NOT_ENUM</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>RemoveFontResourceEx</span><span
lang=EN-US>(</span><span lang=EN-US style='color:fuchsia'>&quot;font/08SeoulHangangM.ttf&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>FR_NOT_ENUM</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image011.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt; AddFontResourceEx() </span>함수로 프로그램 내부에서만
사용<span lang=EN-US>: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux02_font1_dx2d.zip">daux02_font1_dx2d.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.2.2 3D </span><span
style='font-size:14.0pt'>문자열</span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>는 확장 유틸리티로<span lang=EN-US> 3D </span>폰트도
지원합니다<span lang=EN-US>. D3DXCreateText() </span>함수를 사용하면<span lang=EN-US> 3D</span>로
문자열을 만들 수 있습니다<span lang=EN-US>. </span>그러나 이 함수는 한글 문자열을 출력할 때는 유니코드<span
lang=EN-US>(Unicode)</span>를 사용하거나 다음과 같이 <span lang=EN-US>MultiByteToWideChar()
</span>함수를 사용해서 문자열을 유니코드로 만들어야 출력이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>D3DXCreateText() </span>함수는 또한 윈도우<span
lang=EN-US> DC(Device Context)</span>를 인수로 받고 있어 문자열 출력을 위해<span lang=EN-US>
API </span>방식으로 <span lang=EN-US>CreateFont() </span>함수 또는 <span lang=EN-US>CreateFontIndirect()
</span>함수로 서체에 대한 <span lang=EN-US>FONT </span>객체를 만든 다음<span lang=EN-US>, DC</span>에
연결한 후에 <span lang=EN-US>D3DXCreateText()</span>를 호출해야 함을 의미합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음 코드는<span lang=EN-US> 3D </span>문자열을 출력하는 예입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 3D </span><span style='color:green'>문자열 출력 객체</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPD3DXMESH</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_pMshStr;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// DC </span><span style='color:green'>생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>HDC</span><span lang=EN-US> hdc = </span><span lang=EN-US
style='color:#880000'>CreateCompatibleDC</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>HFONT</span><span lang=EN-US> hFontNew = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>HFONT</span><span lang=EN-US> hFontOld = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LOGFONT</span><span lang=EN-US> hfont={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hfont.lfHeight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
= </span><span lang=EN-US style='color:red'>32</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>_tcscpy</span><span lang=EN-US>(hfont.lfFaceName, </span><span
lang=EN-US style='color:#A000A0'>_T</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;08</span><span style='color:fuchsia'>서울남산체<span
lang=EN-US> B&quot;</span></span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hFontNew = </span><span
lang=EN-US style='color:#A000A0'>CreateFontIndirect</span><span lang=EN-US>(&amp;hfont);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hFontOld = (</span><span
lang=EN-US style='color:blue'>HFONT</span><span lang=EN-US>)</span><span
lang=EN-US style='color:#880000'>SelectObject</span><span lang=EN-US>(hdc,
hFontNew); </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>char</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; sSrc[</span><span
lang=EN-US style='color:red'>256</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:fuchsia'>&quot;</span><span style='color:fuchsia'>안녕하세요<span
lang=EN-US>&nbsp; Hello world !!! \0&quot;</span></span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>WCHAR</span><span lang=EN-US> sDst[</span><span lang=EN-US
style='color:red'>256</span><span lang=EN-US>]={</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>멀티 바이트를 유니코드로 변경</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>LcStr_AnsiToUnicode</span><span lang=EN-US>(sDst, sSrc, </span><span
lang=EN-US style='color:#880000'>strlen</span><span lang=EN-US>(sSrc)+</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 3D </span><span style='color:green'>문자열을 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXCreateTextW</span><span lang=EN-US>(m_pDev, hdc,
sDst, </span><span lang=EN-US style='color:red'>200</span><span lang=EN-US>.f, </span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>.f, &amp;m_pMshStr, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>SelectObject</span><span lang=EN-US>(hdc, hFontOld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>DeleteObject</span><span lang=EN-US>( hFontNew);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// DC </span><span style='color:green'>해제</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>DeleteDC</span><span
lang=EN-US>( hdc );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>LcStr_AnsiToUnicode() </span>함수는 유니코드로 문자열을
바꾸어주는 사용자 정의 함수 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=241 height=181
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image012.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;3D </span>문자열 출력<span lang=EN-US>: <a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux02_font2_dx3d.zip">daux02_font2_dx3d.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.2.3 </span><span
style='font-size:14.0pt'>후면 버퍼<span lang=EN-US>(Back Buffer) </span>출력</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXFont</span>는 사용이 편리합니다<span
lang=EN-US>. </span>그러나 문자열이 많아지면 렌더링 속도가 상당히 느려집니다<span lang=EN-US>. </span>만약
문자열이 화면 가득해도 최대 속도를 원한다면 후면 버퍼에 직접 출력하는 방법이 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>D3D9</span>은 알파가 없는 불투명 서피스<span
lang=EN-US>(Surface), D3DFMT_R5G6B5, D3DFMT_X1R5G5B5, D3DFMT_R8G8B8, D3DFMT_X8R8G8B8
</span>형식으로 만든 서피스에 대해서<span lang=EN-US> DC</span>를 가져올 수 있게 했습니다<span
lang=EN-US>.&nbsp; D3DPRESENT_ PARAMETERS </span>구조체 변수 <span lang=EN-US>BackBufferFormat</span>를
<span lang=EN-US>X8R8G8B8 </span>또는 <span lang=EN-US>D3DFMT_R5G6B5</span>로 지정하고
<span lang=EN-US>Flags </span>변수 또한 <span lang=EN-US>D3DPRESENTFLAG_LOCKABLE_BACKBUFFER
</span>으로 지정을 해야만 후면 버퍼에서<span lang=EN-US> DC</span>를 가져올 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_d3dpp. BackBufferFormat = </span><span
lang=EN-US style='color:#A000A0'>D3DFMT_X8R8G8B8</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_d3dpp.MultiSampleType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;
= </span><span lang=EN-US style='color:#A000A0'>D3DMULTISAMPLE_NONE</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>m_d3dpp.Flags = </span><span lang=EN-US
style='color:#A000A0'>D3DPRESENTFLAG_LOCKABLE_BACKBUFFER</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>후면 버퍼의<span lang=EN-US> DC</span>는 아무 때나 사용할 수 있는 것이 아니라 다음과
같이<span lang=EN-US> BeginScene()/EndScene() </span>밖에서만 사용해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pd3dDevice-&gt;</span><span
lang=EN-US style='color:#880000'>BeginScene</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pd3dDevice-&gt;</span><span
lang=EN-US style='color:#880000'>EndScene</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPDIRECT3DSURFACE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; pBackBuffer
= </span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pd3dDevice-&gt;</span><span
lang=EN-US style='color:#880000'>GetBackBuffer</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DBACKBUFFER_TYPE_MONO</span><span
lang=EN-US>, &amp;pBackBuffer );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(pBackBuffer)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>HDC</span><span lang=EN-US> hDC = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pBackBuffer-&gt;</span><span
lang=EN-US style='color:#880000'>GetDC</span><span lang=EN-US>(&amp;hDC);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(hDC)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>HFONT</span><span lang=EN-US>&nbsp;&nbsp; hFontOld
= </span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hFontOld
= (</span><span lang=EN-US style='color:blue'>HFONT</span><span lang=EN-US>)</span><span
lang=EN-US style='color:#880000'>SelectObject</span><span lang=EN-US>(hDC, m_hFont);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>TextOut</span><span lang=EN-US>(hDC, </span><span
lang=EN-US style='color:red'>10</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>200</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;</span><span style='color:fuchsia'>출력 문자열<span
lang=EN-US>&quot;</span></span><span lang=EN-US>, </span><span lang=EN-US
style='color:#880000'>strlen</span><span lang=EN-US>(</span><span lang=EN-US
style='color:fuchsia'>&quot;</span><span style='color:fuchsia'>출력 문자열<span
lang=EN-US>&quot;</span></span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SelectObject</span><span lang=EN-US>(hDC, hFontOld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>DeleteDC</span><span lang=EN-US>( hDC );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pBackBuffer-&gt;</span><span
lang=EN-US style='color:#880000'>ReleaseDC</span><span lang=EN-US>(hDC);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pBackBuffer-&gt;</span><span
lang=EN-US style='color:#880000'>Release</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image013.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt; </span>후면 버퍼<span lang=EN-US> DC</span>에
문자열 출력<span lang=EN-US>: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux02_font3_backbuffer.zip">daux02_font3_backbuffer.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>상당히 빠르게 동작하지만 문제는<span lang=EN-US> Flags </span>변수를<span
lang=EN-US> D3DPRESENTFLAG_LOCKABLE_BACKBUFFER </span>으로 설정하면<span lang=EN-US>
Anti-Aliasing</span>이 지원이 안됩니다<span lang=EN-US>. </span>또한<span lang=EN-US>
BeginScene()/EndScene() </span>밖에서 처리해야 하므로 문자열 출력을 위해서 전체 시스템 자체를 바꾸어야 하는 문제도 있습니다<span
lang=EN-US>. </span>이 모든 것을 감수해도 가장 큰 문제는 후면버퍼에 직접 출력이 되어 게임 안 여러 팝업 창의<span
lang=EN-US> Overlap</span>에서 모든 문자가 앞으로 보이는 문제를 제어하기가 어렵습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.2.4 </span><span
style='font-size:14.0pt'>텍스처를 이용한 출력</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXFont</span>는 문자열이 많아지면 내부 버퍼를 갱신하는 횟수도
증가해 렌더링이 느려지는 것입니다<span lang=EN-US>. </span>앞서 불투명한 서피스에 대해서<span lang=EN-US>
D3D9</span>는<span lang=EN-US> DC</span>를 가져와 사용할 수 있다고 했습니다<span lang=EN-US>. </span>이것을
잘 이용하면 자주 갱신이 안 되는 문자열을 텍스처에 출력해 가지고 있다면 렌더링의 속도는 분명히 증가할 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>텍스처에 문자열을 출력하기 위해 다음과 같이<span lang=EN-US> FONT </span>객체<span
lang=EN-US>, </span>텍스처<span lang=EN-US>, </span>서피스를 준비합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>HFONT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_hFont;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_pTex;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPDIRECT3DSURFACE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_pSfc;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 폰트 객체를 만들고 텍스처는 <span lang=EN-US>D3DFMT_X8R8G8B8 </span>형식으로
만듭니다<span lang=EN-US>. </span>텍스처 객체를 만든 후에 서피스를 텍스처에서 가져 옵니다<span lang=EN-US>.
</span>이 부분은 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux02_font4_tex.zip">daux02_font4_tex.zip</a></span>의<span
lang=EN-US> CMain::Init()</span>에 구현되어 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 1. </span><span style='color:green'>폰트 객체 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LOGFONT</span><span lang=EN-US> logf={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>logf.lfHeight =
</span><span lang=EN-US style='color:red'>32</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>_tcscpy</span><span lang=EN-US>(logf.lfFaceName, </span><span
lang=EN-US style='color:#A000A0'>_T</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;</span><span style='color:fuchsia'>궁서<span
lang=EN-US>&quot;</span></span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_hFont = </span><span
lang=EN-US style='color:#A000A0'>CreateFontIndirect</span><span lang=EN-US>(&amp;logf);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 2. </span><span style='color:green'>텍스처 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#880000'>D3DXCreateTexture</span><span lang=EN-US>(…, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DFMT_X8R8G8B8</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DPOOL_MANAGED</span><span lang=EN-US>, &amp;m_pTex);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 3. </span><span style='color:green'>서피스 가져옴</span></p>

<p class=MsoNormal><span lang=EN-US>m_pTex-&gt;</span><span lang=EN-US
style='color:#880000'>GetSurfaceLevel</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, &amp;m_pSfc);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처를 생성할 때 밉<span lang=EN-US>(Mip) </span>레벨을<span
lang=EN-US> 1</span>로 하고<span lang=EN-US>, </span>윈도우 전환에도 문제 없도록 메모리 풀을<span
lang=EN-US> MANAGED</span>로 설정하는 것이 좋습니다<span lang=EN-US>. </span>이제 서피스에서<span
lang=EN-US> DC</span>를 얻고 문자열을 출력하면 됩니다<span lang=EN-US>. </span>다음 코드는 <span
lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux02_font4_tex.zip">daux02_font4_tex.zip</a></span>의<span
lang=EN-US> CMain::FrameMove() </span>함수에 구현되어 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>텍스처 서피스의<span
lang=EN-US> DC</span>에 문자열 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(m_pSfc)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>HDC</span><span lang=EN-US> hDC = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pSfc-&gt;</span><span
lang=EN-US style='color:#880000'>GetDC</span><span lang=EN-US>(&amp;hDC);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(hDC)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>TCHAR</span><span lang=EN-US> sMsg[</span><span
lang=EN-US style='color:red'>256</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:fuchsia'>&quot;&quot;</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>sprintf</span><span lang=EN-US>( sMsg, </span><span
lang=EN-US style='color:fuchsia'>&quot;</span><span style='color:fuchsia'>텍스처<span
lang=EN-US> DC</span>에 문자열 출력입니다<span lang=EN-US>&quot;</span></span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>HFONT</span><span lang=EN-US> hFontOld = (</span><span
lang=EN-US style='color:blue'>HFONT</span><span lang=EN-US>)</span><span
lang=EN-US style='color:#880000'>SelectObject</span><span lang=EN-US>(hDC, m_hFont);
</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetBkMode</span><span lang=EN-US>(hDC, </span><span
lang=EN-US style='color:#A000A0'>TRANSPARENT</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetTextColor</span><span lang=EN-US>(hDC, </span><span
lang=EN-US style='color:#A000A0'>RGB</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>255</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>255</span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>TextOut</span><span lang=EN-US>(hDC, </span><span
lang=EN-US style='color:red'>50</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>50</span><span lang=EN-US>, sMsg, </span><span
lang=EN-US style='color:#880000'>strlen</span><span lang=EN-US>(sMsg));</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SelectObject</span><span lang=EN-US>(hDC, hFontOld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>DeleteDC</span><span lang=EN-US>( hDC );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pSfc-&gt;</span><span
lang=EN-US style='color:#880000'>ReleaseDC</span><span lang=EN-US>(hDC);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image014.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt; </span>서피스의<span lang=EN-US> DC</span>에
문자 출력<span lang=EN-US>: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux02_font4_tex.zip">daux02_font4_tex.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.2.5 </span><span
style='font-size:14.0pt'>텍스처 출력에 대한 폰트 클래스</span></p>

<p class=MsoNormal>이제 텍스처에 출력이 된다는 것을 알았습니다<span lang=EN-US>. </span>남은 것은 이 내용을<span
lang=EN-US> ID3DXFont</span>처럼 사용하기 편리하게 클래스로 만드는 일입니다<span lang=EN-US>. <a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux02_lnfont_2d.zip">daux02_lnfont_2d.zip</a></span>의 <span lang=EN-US>CLnFont2D
</span>클래스는 텍스처에 문자열을 출력하는 클래스 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>CLnFont2D </span>클래스의 선언에 보면 문자열을 포함하는 텍스처는
다음과 같이 선언되어 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_pTxD; </span><span lang=EN-US
style='color:green'>// Output Texture</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>보통 문자열 이외의 공간은 전부 투명하게 해야 합니다<span lang=EN-US>. </span>그런데 서피스에서<span
lang=EN-US> DC</span>를 가져올 수 있는 것은 불투명 텍스처 밖에 없습니다<span lang=EN-US>. </span>문자열의
배경을 투명하게 만들기 위해서 먼저 임시로 불투명 텍스처를 만들고 이 불투명 텍스처의<span lang=EN-US> DC</span>에 문자열을
출력합니다<span lang=EN-US>. </span>다음으로 알파가 있는 출력용 텍스처를 만들어서 불투명 텍스처 전부를 복사합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>CLnFont2D::SetTexture() </span>함수는 바로 이런 일을
처리합니다<span lang=EN-US>. </span>이 함수의 코드를 설명하면 먼저 다음과 같이 불투명 텍스처<span
lang=EN-US>, </span>이 불투명 텍스처에 대한 서피스<span lang=EN-US>, </span>출력용 텍스처에 대한 서피스를
준비합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; pTxS&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>불투명 텍스처</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPDIRECT3DSURFACE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; pSfTxtS =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>불투명 텍스처의 서피스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPDIRECT3DSURFACE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; pSfTxtD =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력용 텍스처<span
lang=EN-US> m_pTxD</span>의 서피스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 불투명 텍스처를 문자열의 폭과 높이만큼 텍스처를 만들고 서피스를 가져옵니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>문자열 높이와 폭은 <span lang=EN-US>CLnFont2D::SetString(TCHAR* sStr)
</span>함수에서 <span lang=EN-US>GetTextExtentPoint32() </span>함수와 <span
lang=EN-US>GetTextMetrics() </span>함수를 통해서 계산합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXCreateTexture</span><span lang=EN-US>(…, </span><span
lang=EN-US style='color:#A000A0'>D3DFMT_X8R8G8B8</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DPOOL_MANAGED</span><span lang=EN-US>,
&amp;pTxS);&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>불투명<span lang=EN-US> Texture </span>생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pTxS-&gt;</span><span
lang=EN-US style='color:#880000'>GetSurfaceLevel</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, &amp;pSfTxtS);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이 불투명 텍스처의<span lang=EN-US> DC </span>를
얻고 문자열을 씁니다<span lang=EN-US>. </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pSfTxtS-&gt;</span><span
lang=EN-US style='color:#880000'>GetDC</span><span lang=EN-US>(&amp;hDC);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>TextOut</span><span lang=EN-US>(hDC, …, m_sStr, m_iLen);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>마지막 단계에서 알파가 있는 출력용 텍스처를 다시 생성하고
불투명 텍스처에서 알파가 있는 출력용 텍스처로 <span lang=EN-US>D3DXLoadSurfaceFromSurface() </span>함수를
이용해서 전부 복사를 합니다<span lang=EN-US>. </span>이 때 완전 불투명 검정색<span lang=EN-US>(0xFF000000)</span>을
투명 값으로 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXCreateTexture</span><span lang=EN-US>(…, </span><span
lang=EN-US style='color:#A000A0'>D3DFMT_A8R8G8B8</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DPOOL_MANAGED</span><span lang=EN-US>,
&amp;m_pTxD); </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>반투명 텍스처 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pTxD-&gt;</span><span
lang=EN-US style='color:#880000'>GetSurfaceLevel</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, &amp;pSfTxtD);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXLoadSurfaceFromSurface</span><span lang=EN-US>(
pSfTxtD, …, pSfTxtS, </span><span lang=EN-US style='color:#A000A0'>D3DX_DEFAULT</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0xFF000000</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>0xFF000000 </span>색상 값을 투명 키로 만들어서 하나의 색상<span
lang=EN-US>(0xFF000000)</span>을 사용할 수 없지만 전체적으로 텍스처를 이용하고 있어서 문자열이 자주 바뀌지 않는 한 다른
어떤 방법보다 렌더링 속도가 우수하다고 할 수 있습니다<span lang=EN-US>. </span>또한 자주 변하는 문자열을 따로 관리해서 이에
의한 렌더링 속도 저하를 막을 수 있습니다<span lang=EN-US>. </span>예를 들면 채팅과 같은 자주 문자열이 갱신되고 화면 스크롤이
필요한 문자열에 대해서 각 문자열 라인 별로 텍스처를 만들어서 문자열을 출력해 관리하면 문자열에 의한 속도 저하를 막을 수 있습니다<span
lang=EN-US>. </span></p>

<p class=MsoNormal>외곽선 추출 알고리즘 없이<span lang=EN-US> 9</span>번을<span lang=EN-US>
DC</span>에 써서 간단하게 문자열에 테두리를 만들 수도 있습니다<span lang=EN-US>. </span>그리고 이런 방식을 <span
lang=EN-US>Direct3DMobile</span>에 적용을 하면 한글과 같은<span lang=EN-US> 2Byte </span>문자열을
쉽게 출력할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음 그림은 텍스처에 문자열을 출력해서 만든 예제 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=272 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image015.gif">&nbsp;<img border=0 width=272 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image016.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>텍스처에 문자열 출력 클래스<span lang=EN-US>:
<a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux02_lnfont_2d.zip">daux02_lnfont_2d.zip</a>, <a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux02_lnfont_3d.zip">daux02_lnfont_3d.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>DXSDK 2003 summer </span>버전까지 예제 중에<span
lang=EN-US> CD3DFont </span>클래스가 있었습니다<span lang=EN-US>. </span>이 클래스는 아스키<span
lang=EN-US> (ASCII) </span>코드에 대해서만 출력하고 있습니다<span lang=EN-US>. </span>그런데 재미있는
것은 아스키 문자열 중에서 특수 문자를 제외하고 아스키 번호<span lang=EN-US> 32(space) ~ 126</span>까지 문자들을
텍스처에 미리 만들어 놓고<span lang=EN-US>, </span>문자열출력을 요청하면 화면 위치에 한 글자씩 출력을 합니다<span
lang=EN-US>. </span>이 방법은<span lang=EN-US> OpenGL</span>에서도 비슷하게 이용하는 방법이니 나중에 시간이
있으면 들여다 보기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3.3 FPS (Frames Per
Second)</span></p>

<p class=MsoNormal><span lang=EN-US>2D </span>게임 프로그래밍에서<span lang=EN-US> Frame
</span>계산을 배웠습니다<span lang=EN-US>. </span>프레임 계산은 평균을 이용 <span lang=EN-US>1</span>초
동안 화면에 렌더링 하는 횟수를 계산 합니다<span lang=EN-US>. </span>따라서 가장 정확한 시간을 사용해야 프레임도 정확히 계산
될 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>윈도우 시스템은 시간 측정을 위해 <span lang=EN-US>GetTickCount()</span>와<span
lang=EN-US> timeGetTime() </span>함수가 존재 합니다<span lang=EN-US>. </span>그런데 만약 윈도우
시스템을 사용하지 않는 모발일 시스템 같은 경우에는 <span lang=EN-US>C-Library</span>를 사용할 수 밖에 없는 경우도
있습니다<span lang=EN-US>. </span>이 때<span lang=EN-US> timeGetTime() </span>대신<span
lang=EN-US> clock() </span>함수를 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>clock()</span>함수는 대략 <span lang=EN-US>1/CLOCKS_PER_SEC
</span>정도의 정확도를 가지며 윈도우 시스템 시간 보다 정확도는 많이 떨어지는 편이지만<span lang=EN-US> C </span>언어가
지원되는 어떤 플랫폼에서도 사용할 수 있고 프레임이 높지 않은 경우에는 대안으로 사용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음은<span lang=EN-US> clock()</span>함수를 사용해서 프레임의 평균을 계산하는 코드
입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>UseClock</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>&nbsp; fFps = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iCnt
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>clock_t</span><span lang=EN-US> dBgn = </span><span
lang=EN-US style='color:#880000'>clock</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>clock_t</span><span lang=EN-US> dCur = </span><span
lang=EN-US style='color:#880000'>clock</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++iCnt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(iCnt&gt;=MaxCount)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFps
= </span><span lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>(dCur
- dBgn);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFps
= iCnt*</span><span lang=EN-US style='color:red'>1000</span><span lang=EN-US>./fFps;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iCnt
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dBgn
= dCur;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> (</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>)fFps;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>같은 코드에 시간 호출 함수를 윈도우의<span lang=EN-US> timeGetTime(), </span>또는<span
lang=EN-US> GetTickCount()</span>를<span lang=EN-US> clock() </span>함수 자리에 바꾸어 놓으면
윈도우 시스템에서 잘 동작하는 프레임 계산 함수가 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>UseTimeGetTime</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>&nbsp; fFps = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iCnt
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp; dBgn = </span><span
lang=EN-US style='color:#880000'>timeGetTime</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp; dCur = </span><span
lang=EN-US style='color:#880000'>timeGetTime</span><span lang=EN-US>();&nbsp; </span><span
lang=EN-US style='color:green'>// GetTickCount()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++iCnt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(iCnt&gt;=MaxCount)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFps
= </span><span lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>(dCur-dBgn);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFps
= iCnt*</span><span lang=EN-US style='color:red'>1000</span><span lang=EN-US>./fFps;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iCnt
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dBgn
= dCur;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> (</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>)fFps;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>만약<span lang=EN-US> Intel CPU</span>를
대상으로 한다면 다음의 <span lang=EN-US>GetIntelPrecisionTime() </span>함수와 같이 <span
lang=EN-US>Inline Assembly</span>를 이용해서<span lang=EN-US> 1/1,000,000 </span>초 단위의
고해상도<span lang=EN-US>(High-Resolution) </span>시간을 측정할 수 있습니다<span lang=EN-US>. </span>이
함수는<span lang=EN-US> clock() </span>또는<span lang=EN-US> GetTickCount() </span>과
비슷한 동작을 위해 작성 되었습니다<span lang=EN-US>. </span>시간의 정밀도를 위해<span lang=EN-US>
double </span>형을 사용하고 있음을 주의하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DOUBLE</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>GetIntelPrecisionTime</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>#define </span><span lang=EN-US style='color:
#A000A0'>cpuid</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>__asm</span><span lang=EN-US> __emit </span><span
lang=EN-US style='color:red'>0fh</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>__asm</span><span lang=EN-US> __emit </span><span
lang=EN-US style='color:red'>0a2h</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>#define </span><span lang=EN-US style='color:
#A000A0'>rdtsc</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>__asm</span><span lang=EN-US> __emit </span><span
lang=EN-US style='color:red'>0fh</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>__asm</span><span lang=EN-US> __emit </span><span
lang=EN-US style='color:red'>031h</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>LARGE_INTEGER</span><span lang=EN-US>&nbsp;&nbsp; Freq
={</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>BOOL</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bEnable
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LARGE_INTEGER&nbsp; </span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dCur
={</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dTime
=</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == bEnable)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == Freq.QuadPart)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bEnable
= </span><span lang=EN-US style='color:#880000'>QueryPerformanceFrequency</span><span
lang=EN-US>(&amp;Freq);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == bEnable)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>__asm</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>cpuid</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>rdtsc</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>mov</span><span lang=EN-US> dCur.LowPart, </span><span
lang=EN-US style='color:#880000'>eax</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>mov</span><span lang=EN-US> dCur.HighPart, </span><span
lang=EN-US style='color:#880000'>edx</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dTime
= </span><span lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>(dCur.QuadPart)/</span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>(Freq.QuadPart);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dTime
*=</span><span lang=EN-US style='color:red'>1000</span><span lang=EN-US>.;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US>&nbsp; dTime;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이전의 프레임 계산에서<span lang=EN-US> clock(), </span>또는<span
lang=EN-US> timeGetTime()</span>을 <span lang=EN-US>GetIntelPrecisionTime () </span>함수로
바꾸면 인텔 칩의 고해상도 타이머를 이용한 프레임 계산 함수가 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>UseTimeGetPrecisionTime</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>&nbsp; fFps = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iCnt
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>&nbsp; dBgn = </span><span
lang=EN-US style='color:#880000'>GetIntelPrecisionTime</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>&nbsp; dCur = </span><span
lang=EN-US style='color:#880000'>GetIntelPrecisionTime</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++iCnt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(iCnt&gt;=MaxCount)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFps
= dCur-dBgn;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFps
= iCnt*</span><span lang=EN-US style='color:red'>1000</span><span lang=EN-US>./fFps;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iCnt
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dBgn
= dCur;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> (</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>)fFps;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>윈도우 시스템에서는 고해상도 타이머를 위한 <span lang=EN-US>QueryPerformanceCounter()</span>와
<span lang=EN-US>QueryPerformance-Frequency() </span>함수가 있습니다<span lang=EN-US>.
</span>만약<span lang=EN-US> CPU</span>에서 고해상도 타이머를 지원이 되면 이 둘의 함수를 사용하는 것이 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>먼저 <span lang=EN-US>QueryPerformanceFrequency() </span>함수를 가지고
진동수를 가져 옵니다<span lang=EN-US>. </span>만약 가져오기가 실패하면<span lang=EN-US> 0</span>을 반환합니다<span
lang=EN-US>. </span>다음으로 <span lang=EN-US>QueryPerformanceCounter() </span>함수를 사용해서
수행한<span lang=EN-US> Counter</span>를 얻어 옵니다<span lang=EN-US>. </span>이 값을 앞에서 구한
진동수로 나누면 프레임이 됩니다<span lang=EN-US>. </span>다음 함수는 이 두 함수를 사용해서 프레임을 계산하는 코드 입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>UsePerformanceCounter</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFps
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iCnt
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>LARGE_INTEGER</span><span lang=EN-US>&nbsp;&nbsp; Freq
= {</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>LARGE_INTEGER</span><span lang=EN-US>&nbsp;&nbsp; dBgn
= {</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>BOOL</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bEnable=</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LARGE_INTEGER</span><span lang=EN-US>&nbsp; dCur
= {</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == bEnable)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.f;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>하드웨어 지원이 안됨</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == Freq.QuadPart)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>최초 함수 호출 시</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bEnable
= </span><span lang=EN-US style='color:#880000'>QueryPerformanceFrequency</span><span
lang=EN-US>( &amp;Freq);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == bEnable)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.f;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>QueryPerformanceCounter</span><span
lang=EN-US>(&amp;dBgn);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>QueryPerformanceCounter</span><span
lang=EN-US>(&amp;dCur);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++iCnt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(iCnt&gt;=MaxCount)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US> fElapsedTime =</span></p>

<p class=MsoNormal style='margin-left:80.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>&nbsp;</span><span lang=EN-US style='color:blue'>DOUBLE</span><span
lang=EN-US>(dCur.QuadPart - dBgn.QuadPart)/ </span><span lang=EN-US
style='color:blue'>DOUBLE</span><span lang=EN-US>(Freq.QuadPart);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFps
= iCnt/fElapsedTime;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iCnt
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dBgn
= dCur;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> (</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>)fFps;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>QueryPerformanceCounter() </span>에서 얻은 값을 <span
lang=EN-US>QueryPerformanceFrequency() </span>함수에서 얻은 진동수로 나누면 시간이 되어<span
lang=EN-US> timeGetTime()</span>을 대신할 수 있습니다<span lang=EN-US>. </span>이 때 주의할 것은
고해상도 타이머는 해상도가<span lang=EN-US> 1/1,000,000 </span>초 입니다<span lang=EN-US>.
timeGetTime()</span>은<span lang=EN-US> 1/1,000 </span>초 단위이므로 이 둘을 맞추려면 고해상도 타이머부분에<span
lang=EN-US> 1000.0</span>을 곱해야 서로가 동일한 시간을 만들어 줍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DOUBLE</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>TimeGetPrecisionTime</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>LARGE_INTEGER</span><span lang=EN-US>&nbsp;&nbsp; Freq
={</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>BOOL</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bEnable
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LARGE_INTEGER</span><span lang=EN-US>&nbsp; dCur
={</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dTime
=</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == bEnable)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == Freq.QuadPart)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bEnable
= </span><span lang=EN-US style='color:#880000'>QueryPerformanceFrequency</span><span
lang=EN-US>(&amp;Freq);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == bEnable)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>QueryPerformanceCounter</span><span
lang=EN-US>(&amp;dCur);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dTime
= </span><span lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>(dCur.QuadPart)/</span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>(Freq.QuadPart);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dTime
*=</span><span lang=EN-US style='color:red'>1000</span><span lang=EN-US>.;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US>&nbsp; dTime;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음 그림은 이들 함수를 이용해서 프레임과 시간을 계산한 결과 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=280 height=250
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image017.gif">&nbsp;<img border=0 width=280 height=250
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image018.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;30 </span>프레임 평균<span lang=EN-US>, 4 </span>프레임
평균<span lang=EN-US>: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux03_frame.zip">daux03_frame.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>프레임을 계산하는데 대략<span lang=EN-US> 30</span>을 평균 횟수로 설정한 경우에는 왼쪽처럼
고해상도 또는 저해상도 타이머를 사용해도 거의 차이가 없습니다<span lang=EN-US>. </span>그런데 횟수를 줄이면 해상도가 낮은<span
lang=EN-US> clock(), timeGetTime() </span>함수는 계산이 엉망이 됩니다<span lang=EN-US>. </span>따라서
아주 빠른 시스템을 대상으로 게임을 만들 경우에는 고해상도 타이머를 이용하는 것이 유리할 것 같지만 꼭 그렇지도 않은 것이 실제로 게임의 렌더링
속도는 프로그래머들이 <span lang=EN-US>15~60 </span>사이에 맞추는 경향이 있습니다<span lang=EN-US>. </span>게임이<span
lang=EN-US> 1000 </span>프레임 이상 안 되는 경우에는 여전히<span lang=EN-US> timeGetTime()</span>과
같은 함수로 프레임 계산을 해도 충분합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3.4 </span><span
style='font-size:16.0pt'>한글<span lang=EN-US> IME</span></span></p>

<p class=MsoNormal>한글 문자열은<span lang=EN-US> ID3DXFont </span>등을 이용해 출력할 수 있었습니다<span
lang=EN-US>. </span>그런데 한글 입력은 어떻게 처리할까요<span lang=EN-US>? </span>영어는 아스키 코드로 <span
lang=EN-US>GetAsyncKeyState() </span>함수 등을 이용해 즉시 처리가 가능하지만 한글의 경우 글자를 조합해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>윈도우 시스템은 입력기 또는 입력 방식 편집기라는<span lang=EN-US> IME(Input Method
Editor) </span>시스템을 이용해서 아스키 코드 이외의 문자들을 조합하며<span lang=EN-US>, IME</span>를 사용하기
위해서는 윈도우의 메시지 시스템을 이용해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>순수 한글만 출력하는 경우에 윈도우 메시지 <span lang=EN-US>WM_IME_STARTCOMPOSITION,
WM_IME_COMPOSITION, WM_CHAR </span>세 가지만 사용합니다<span lang=EN-US>. WM_IME_STARTCOMPOSITION
</span>메시지는 한글 입력을 막 시작할 때<span lang=EN-US>, WM_IME_COMPOSITION</span>는 글자를 조합 중일
때<span lang=EN-US>, WM_CHAR</span>는 한글 조합 이외에 아스키 코드가 입력될 때 처리를 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>메시지 프로시저<span lang=EN-US>(Message Procedure) </span>함수에서 먼저 다음과
같이 <span lang=EN-US>WM_IME_STARTCOMPOSITION</span>에서 조합이 시작 됐음을 인지 합니다<span
lang=EN-US>. </span>코드에서는 아무 일도 안 하고 있는데 필요하다면 뭔가를 넣어주는 것도 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LRESULT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcHangul</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>MsgProc</span><span lang=EN-US>( </span><span lang=EN-US
style='color:blue'>HWND</span><span lang=EN-US> hWnd, </span><span lang=EN-US
style='color:blue'>UINT</span><span lang=EN-US> uMsg, </span><span lang=EN-US
style='color:blue'>WPARAM</span><span lang=EN-US> wParam, </span><span
lang=EN-US style='color:blue'>LPARAM</span><span lang=EN-US> lParam )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; len
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>HIMC</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; hIMC=
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>WPARAM</span><span lang=EN-US>&nbsp; wLo = </span><span
lang=EN-US style='color:#A000A0'>LOWORD</span><span lang=EN-US>(wParam);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>WM_IME_STARTCOMPOSITION</span><span lang=EN-US> == uMsg)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>TRUE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 글자를 조합 중인 <span lang=EN-US>WM_IME_COMPOSITION </span>메시지
처리 입니다<span lang=EN-US>. </span>글자가 조합 중 또는 조합이 완료 되면 이 메시지로 옵니다<span
lang=EN-US>. </span>먼저 <span lang=EN-US>IME </span>핸들을 <span lang=EN-US>ImmGetContext()</span>함수를
통해서 가져옵니다<span lang=EN-US>. </span>물론 다 사용했으면 <span lang=EN-US>ImmReleaseContext()
</span>함수로 자원을 반납 해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>else</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>WM_IME_COMPOSITION</span><span lang=EN-US> == uMsg)&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>글씨 조합 중</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hIMC
= </span><span lang=EN-US style='color:#880000'>ImmGetContext</span><span
lang=EN-US>(hWnd);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Get IME Handle</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>순서상으로 글자의 조합 중인 것을 먼저 처리 하지 않고 조합이
완료된 것을 먼저 처리합니다<span lang=EN-US>. </span>완료에 대한 판단은<span lang=EN-US> LPARAM </span>값을
<span lang=EN-US>GCS_RESULTSTR </span>값으로 비트 연산을 통해서 판별합니다<span lang=EN-US>. </span>완료된
문자열은 <span lang=EN-US>ImmGetCompositionString() </span>함수를 두 번 사용해서 얻는데 먼저<span
lang=EN-US> IME </span>핸들과 <span lang=EN-US>GCS_RESULTSTR </span>인수 만을 넣어서 문자열의
길이를 얻어 오고 다음으로 이 길이와 버퍼를 연결해서 버퍼를 통해서 문자열을 가져 옵니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US> (lParam &amp; </span><span
lang=EN-US style='color:#A000A0'>GCS_RESULTSTR</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; len
= ImmGetCompositionString(hIMC, GCS_RESULTSTR, NULL, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>); </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>조합이 완료된 길이</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> &lt; len)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>ImmGetCompositionString</span><span
lang=EN-US>(hIMC, </span><span lang=EN-US style='color:#A000A0'>GCS_RESULTSTR</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>&quot;</span><span
style='color:red'>완성된 문자열 버퍼<span lang=EN-US>&quot;</span></span><span
lang=EN-US>, len);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>조합 중인 문자열도 화면에 출력을 해야 합니다<span lang=EN-US>. LPARAM </span>값에<span
lang=EN-US> GCS_COMPSTR </span>값으로 비트 연산을 하면 조합 중인지 알 수 있습니다<span lang=EN-US>. </span>앞의
완료된 문자열을 얻듯이 <span lang=EN-US>ImmGetCompositionString() </span>함수를 두 번 사용해서 조합 중인
문자열을 얻어 옵니다<span lang=EN-US>. </span>이 때는 <span lang=EN-US>GCS_RESULTSTR </span>대신
<span lang=EN-US>GCS_COMPSTR </span>값을 사용해야 합니다<span lang=EN-US>. </span></p>

<p class=MsoNormal>글자를 백 스페이스<span lang=EN-US>(Back Space) </span>키로 지워서 조합 중인 길이를<span
lang=EN-US> 0</span>으로 만들 때가 있습니다<span lang=EN-US>. </span>이 경우에는 조합중인 버퍼를 말끔히 비우는
것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>else</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US> (lParam &amp; </span><span
lang=EN-US style='color:#A000A0'>GCS_COMPSTR</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; len
= </span><span lang=EN-US style='color:#A000A0'>ImmGetCompositionString</span><span
lang=EN-US>(hIMC, </span><span lang=EN-US style='color:#A000A0'>GCS_COMPSTR</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>); </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>조합중인 길이</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>==len)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조합 중에<span
lang=EN-US> Back space</span>가 온 경우</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>EraseWord</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>ImmGetCompositionString</span><span
lang=EN-US>(hIMC, </span><span lang=EN-US style='color:#A000A0'>GCS_COMPSTR</span><span
lang=EN-US>, m_sWrd, len);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>한글 입력을 다 처리 했으면<span lang=EN-US>
IME </span>핸들을 반환합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>ImmReleaseContext</span><span lang=EN-US>(hWnd, hIMC);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>한글과 같이 영문도 출력해야 하므로<span
lang=EN-US> IME </span>작동이 아닐 때 아스키 문자들에 대해서<span lang=EN-US> WM_CHAR </span>메시지에서
처리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>else</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>WM_CHAR</span><span lang=EN-US> == uMsg)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(wParam&gt;=</span><span
lang=EN-US style='color:red'>32</span><span lang=EN-US> &amp;&amp; wParam&lt;</span><span
lang=EN-US style='color:red'>127</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_sStr[</span><span
lang=EN-US style='color:#880000'>strlen</span><span lang=EN-US>(m_sStr)] = wParam;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>아스키 문자도<span lang=EN-US> 0~31 </span>번까지는
통신<span lang=EN-US>, </span>제어에 관련된 문자입니다<span lang=EN-US>. </span>이들은 화면에 출력할 필요가
없으므로<span lang=EN-US> 32~126 </span>사이의 문자만 출력하게 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=280 height=195 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image019.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;IME </span>한글<span
lang=EN-US>: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux04_IME_hangul.zip">daux04_IME_hangul.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>예제 <span lang=EN-US><a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux04_IME_hangul.zip">daux04_IME_hangul.zip</a></span>은<span lang=EN-US>
IME</span>를 사용해서 한글을 출력하는 예제 입니다<span lang=EN-US>. </span>한글을 입력하고 엔터 키를 누르면 윈도우
타이틀에 해당 문자열을 출력해 줍니다<span lang=EN-US>. </span>다시 한글 입력을 사용하려면 엔터 키를 한 번 더 누르면 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3.5 Texture</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.5.1 </span><span
style='font-size:14.0pt'>밉맵 사용 비교</span></p>

<p class=MsoNormal>텍스처를 파일에서 읽어 오는 함수는 <span lang=EN-US>D3DXCreateTextureFromFileEx()
</span>함수와 <span lang=EN-US>D3DXCreateTexture-FromFile() </span>함수를 가장 많이 사용하고 있습니다<span
lang=EN-US>. </span>앞서<span lang=EN-US> 2D </span>게임 강의에서<span lang=EN-US> 2D </span>게임의
텍스처는 <span lang=EN-US>D3DXCreateTextureFromFileEx() </span>함수를 사용한다고 했습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>도움말을 보면 <span lang=EN-US>D3DXCreateTextureFromFile() </span>함수는
<span lang=EN-US>D3DXCreateTextureFromFileEx(pDevice, pSrcFile, D3DX_DEFAULT,
D3DX_DEFAULT, D3DX_DEFAULT, 0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED, D3DX_DEFAULT,
D3DX_DEFAULT, 0, NULL, NULL, ppTexture)</span>와 같다고 되어 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처의 필터링에서 우리는 밉맵을 배웠습니다<span lang=EN-US>. </span>밉맵은<span
lang=EN-US> Anti-Aliasing</span>을 위해 원본 텍스처를<span lang=EN-US> 2</span>의 승수로 하위 텍스처의
크기는<span lang=EN-US> 1/4</span>씩 줄여 나가면서 만든다고 했습니다<span lang=EN-US>. </span>원본 텍스처와
하위 텍스처로 인해 늘어난 메모리는 등비 수열이 되어 대략 다음과 같이 계산이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;<sub><img border=0 width=183
height=67 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image020.gif"></sub>&nbsp;~ 1.33</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 계산은 약<span lang=EN-US> 33 %</span>의 메모리 증가를 보이고 있습니다<span
lang=EN-US>. </span>실제로도 비슷한 결과가 되는지 살펴 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux05_texture1_mipmap.zip">daux05_texture1_mipmap.zip</a>
</span>는 밉맵과 밉맵 레벨을<span lang=EN-US> 1</span>로 할 때에 사용하는 메모리를 비교 하고 있습니다<span
lang=EN-US>. </span>메모리 비교를 위해서<span lang=EN-US> MEMORYSTATUS </span>타입의 전역 변수를
설정하고 텍스처를 생성하기 전에 이 전역 변수에 시스템의 사용 메모리를 <span lang=EN-US>GlobalMemoryStatus() </span>함수를
이용해서 기록합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>MEMORYSTATUS</span><span
lang=EN-US>&nbsp;&nbsp; g_MmSt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>전역 변수</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>GlobalMemoryStatus</span><span
lang=EN-US>(&amp;g_MmSt);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>대략<span lang=EN-US> 100 </span>정도 <span lang=EN-US>D3DXCreateTextureFromFileEx(),
D3DXCreateTextureFromFile() </span>함수로 같은 파일을 호출해서 이 둘의 메모리 사용을 비교해 보면 밉맵 레벨을 풀어
놓으면 약<span lang=EN-US> 30%</span>정도 증가 하고 있음을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3D</span>는 밉맵이 필요하지만<span lang=EN-US> 2D</span>는
밉맵이 전혀 필요가 없습니다<span lang=EN-US>. </span>따라서 밉맵 레벨을 조정할 수 있는 <span lang=EN-US>D3DXCreateTextureFromFileEx()
</span>함수를 사용하면 <span lang=EN-US>D3DXCreateTextureFrom-File() </span>함수를 사용할 때보다
메모리를<span lang=EN-US> 30% </span>정도 절약할 수 있게 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.5.2 </span><span
style='font-size:14.0pt'>텍스처 파일<span lang=EN-US> Merge</span></span></p>

<p class=MsoNormal>파일의 보호를 위해 머지<span lang=EN-US>(Merge: </span>합병<span
lang=EN-US>)</span>할 필요도 있습니다<span lang=EN-US>. </span>간단한 머지 방법은 전체 텍스처의 숫자를 파일에
기록하고 순차적으로 파일의 이름<span lang=EN-US>, </span>크기<span lang=EN-US>, </span>시작 포인터<span
lang=EN-US>, </span>종료 포인터 텍스처 데이터를 반복해서 기록합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=552 height=274
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image021.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>여러 가지 머지 방법<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>좀 더 향상된 기술은 파일의 이름<span lang=EN-US>, </span>크기<span
lang=EN-US>, </span>시작포인터<span lang=EN-US>, </span>종료 포인터 정보를 먼저 기록한 후에 텍스처의 파일을
헤더에 기록된 순서대로 머지 합니다<span lang=EN-US>. </span>아니면 텍스처 파일을 먼저 머지 한 후에 마지막에 파일 정보를
기록하는 방법도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>어떤 방식으로 머지를 하든 다시 이 파일들을 풀어서 텍스처를 생성해야 합니다<span lang=EN-US>.
</span>그런데 텍스처를 임시 폴더에 풀어서 <span lang=EN-US>D3DXCreateTextureFromFile(0 </span>함수
등으로 텍스처를 생성하게 되면 하드 디스크를 사용하게 되어 파일이 많은 경우 로딩에 시간이 많이 듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>는 파일 이외에 메모리<span lang=EN-US>, </span>리소스에서
텍스처를 생성하는 함수가 있습니다<span lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>D3DXCreateTextureFromFileInMemoryEx(),D3DXCreateTextureFromFileInMemory()
</span>함수는 메모리에서 텍스처를 생성하며<span lang=EN-US>, D3DXCreateTextureFromResourceEx(),D3DXCreateTextureFromResource()
</span>함수는 프로그램의 리소스에서 텍스처를 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux05_texture2_merge_file.zip">daux05_texture2_merge_file.zip</a></span>은
머지를 한 후에 <span lang=EN-US>3DXCreateTextureFromFileInMemoryEx() </span>함수로 메모리에서
텍스처를 생성하는 예제 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>머지를 위해서 각 파일에 대한 정보를 기록할 수 있도록 다음과 같이 파일 이름<span lang=EN-US>,
</span>크기<span lang=EN-US>, </span>시작 포인터<span lang=EN-US>, </span>끝 포인터를 저장할 수
있는 클래스가 필요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>MrgTx</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; sFile[</span><span
lang=EN-US style='color:red'>256</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// File Name</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iSize;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// File Size</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iBgn;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Starting point</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iEnd;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// End point</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>typedef</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>std</span><span lang=EN-US>::</span><span lang=EN-US
style='color:blue'>vector</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>MrgTx</span><span lang=EN-US>* &gt;&nbsp; </span><span
lang=EN-US style='color:blue'>lsTx</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>머지를 실행하면 파일의 정보를 먼저 모으고 그 다음으로 하나의 파일에 기록을 합니다<span
lang=EN-US>. </span>여기서는 앞의 머지 방법 그림 중에 가운데 부분 그림처럼 파일의 개수<span lang=EN-US>, </span>파일의
정보<span lang=EN-US>, </span>파일 내용을 기록하겠습니다<span lang=EN-US>. CMain::MergeFile()
</span>함수가 다음과 같이 이를 구현하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>먼저 파일의 정보를 읽어와 머지 정보를 가지고 있는 벡터에 넣습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMain</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>MergeFile</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>lsTx</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; vTx;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 1. Merge File Information</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vTx.</span><span
lang=EN-US style='color:#880000'>push_back</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>MrgTx</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;Texture/seatosky1.jpg&quot;</span><span
lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vTx.</span><span
lang=EN-US style='color:#880000'>push_back</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>MrgTx</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;Texture/seatosky2.jpg&quot;</span><span
lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp; vTx[vTx.</span><span lang=EN-US
style='color:#880000'>size</span><span lang=EN-US>()-</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>]));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다음으로 머지 파일을 생성하고 파일의 개수를 기록한 다음<span
lang=EN-US>,&nbsp; </span>벡터에 저장되어 있는 파일들의 정보를 기록합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iN=vTx.</span><span
lang=EN-US style='color:#880000'>size</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>BYTE</span><span lang=EN-US>*&nbsp;&nbsp; pSrc;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>FILE</span><span lang=EN-US>* fpDst = </span><span
lang=EN-US style='color:#880000'>fopen</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;Texture/Merge.mrg&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;wb&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 2. Write File Counter</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>fwrite</span><span lang=EN-US>(&amp;iN, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(iN), fpDst);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 3. Write File Information</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;iN; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>MrgTx</span><span lang=EN-US>* pTxF = vTx[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(pTxF-&gt;sFile,&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(pTxF-&gt;sFile),
fpDst);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다음으로 파일을 통째로 읽어와서 머지 파일에 기록합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 5. Write File Data</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;iN; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>MrgTx</span><span lang=EN-US>* pTxF = vTx[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fpSrc
= </span><span lang=EN-US style='color:#880000'>fopen</span><span lang=EN-US>(pTxF-&gt;sFile,
</span><span lang=EN-US style='color:fuchsia'>&quot;rb&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSrc
= </span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>[pTxF-&gt;iSize];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fread</span><span lang=EN-US>(pSrc, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, pTxF-&gt;iSize, fpSrc);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fclose</span><span lang=EN-US>(fpSrc);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(pSrc, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, pTxF-&gt;iSize, fpDst);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 머지 파일을 만들었으면 이것을 다시 풀어서 확인해 봐야 합니다<span lang=EN-US>. CMain::GetFileData()
</span>함수는<span lang=EN-US> new </span>연산자로 임시 버퍼를 만들고 머지 파일에서 파일 데이터를 읽어오는 역할을
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>BYTE</span><span lang=EN-US>* </span><span lang=EN-US
style='color:blue'>CMain</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>GetFileData</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> idx, </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US>* iSize)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>FILE</span><span lang=EN-US>* fp = </span><span lang=EN-US
style='color:#880000'>fopen</span><span lang=EN-US>(</span><span lang=EN-US
style='color:fuchsia'>&quot;Texture/Merge.mrg&quot;</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;rb&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 3. Read File Information</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;iN; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>MrgTx</span><span lang=EN-US>* pTxF = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>MrgTx</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vTx.</span><span
lang=EN-US style='color:#880000'>push_back</span><span lang=EN-US>(pTxF);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pTxF&nbsp;&nbsp;&nbsp; =
vTx[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fread</span><span lang=EN-US>(pTxF-&gt;sFile,&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(pTxF-&gt;sFile),
fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fread</span><span lang=EN-US>(&amp;pTxF-&gt;iSize,&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(pTxF-&gt;iSize),
fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>MrgTx</span><span lang=EN-US>* pTxF = vTx[idx];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 4. Move File Point</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>fseek</span><span lang=EN-US>(fp, pTxF-&gt;iBgn, </span><span
lang=EN-US style='color:#A000A0'>SEEK_SET</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 6. Read File Data</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pBuf = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>[pTxF-&gt;iSize];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>fread</span><span lang=EN-US>(pBuf, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, pTxF-&gt;iSize, fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>fclose</span><span lang=EN-US>(fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>return</span><span lang=EN-US> pBuf;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>CMain::GetFileData() </span>함수로 읽은 파일의 데이터에서
<span lang=EN-US>D3DXCreateTextureFromFileInMemoryEx()</span>함수로 텍스처를 생성합니다<span
lang=EN-US>. </span>이 예는<span lang=EN-US> CMain::FrameMove()</span>에 구현되어 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>HRESULT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMain</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>FrameMove</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US>iIdx = </span><span
lang=EN-US style='color:#880000'>rand</span><span lang=EN-US>()%</span><span
lang=EN-US style='color:red'>10</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iSize=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>BYTE</span><span lang=EN-US>*&nbsp;&nbsp; pSrc = </span><span
lang=EN-US style='color:#880000'>GetFileData</span><span lang=EN-US>(iIdx,
&amp;iSize);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXCreateTextureFromFileInMemoryEx</span><span
lang=EN-US>(…);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux05_texture2_merge_file.zip">daux05_texture2_merge_file.zip</a></span>를
참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=264 height=198
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image022.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt; </span>합병한 파일에서 텍스처 생성<span
lang=EN-US>: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux05_texture2_merge_file.zip">daux05_texture2_merge_file.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.5.3 Private Data</span></p>

<p class=MsoNormal><span lang=EN-US>Private Data</span>는 단어 뜻 그대로 내부적인 데이터로<span
lang=EN-US> D3D</span>에서 <span lang=EN-US>IDirect3DResource9,
IDirect3DBaseTexture9, IDirect3DCubeTexture9, IDirect3DTexture9,
IDirect3DVolumeTexture9, IDirect3DIndexBuffer9, IDirect3DVertexBuffer9 </span>등의
자원에 어떤 목적을 위해 보조적으로 할당한 자원을 저장하는 공간입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>예를 들어<span lang=EN-US> D3D</span>는 텍스처를<span lang=EN-US> 2</span>의
승수로 만들어 버립니다<span lang=EN-US>. 2</span>의 승수가 아닌 텍스처는 원본 정보를 어떤 식으로든지 저장을 해야만 렌더링에서
정확 이미지 영역을 표시할 수 있습니다<span lang=EN-US>. </span>그런데 만약 원본 정보를 넘길 수 없는 상황이 있다면 어떻게
할까요<span lang=EN-US>?</span></p>

<p class=MsoNormal>물론 원본 이미지 정보를 받을 수 있도록 시스템을 수정해야 하는 것이 가장 현명한 방법입니다<span
lang=EN-US>. </span>이 마 저도 안될 때는<span lang=EN-US> Private Data</span>를 사용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음과 같이 텍스처를 생성하고 원본 이미지의 정보를<span lang=EN-US> new </span>연산자로
동적 할당한 다음에 해당 텍스처에<span lang=EN-US> SetPrivateData() </span>함수로 연결합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>GUID</span><span lang=PT-BR> </span><span lang=PT-BR>IID_ILcTexInfo</span><span
lang=EN-US> ={</span><span lang=PT-BR style='color:red'>0x85c31227</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0x3de5</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0x4f00</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0x9b</span></p>

<p class=MsoNormal style='margin-left:80.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>, </span><span lang=PT-BR style='color:red'>0x3a</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0xf1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0x1a</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0xc3</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0x8c</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0x18</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0xb5</span><span
lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT </span><span lang=EN-US style='color:#880000'>LcUtil_TextureLoad</span><span
lang=EN-US>(…, </span><span lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span
lang=EN-US>* pTx, </span><span lang=EN-US style='color:blue'>TCHAR</span><span
lang=EN-US>* sFile,…)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXIMAGE_INFO</span><span lang=EN-US>* pImg = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXIMAGE_INFO</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXCreateTextureFromFileEx</span><span lang=EN-US>(pDev,
sFile, …, pImg, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, pTx);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>(*pTx)-&gt;</span><span
lang=EN-US style='color:#880000'>SetPrivateData</span><span lang=EN-US>( IID_ILcTexInfo,
&amp;pImg, </span><span lang=EN-US style='color:blue'>sizeof</span><span
lang=EN-US>(pImg), </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 연결하고 나서 다음과 같이<span lang=EN-US> GetPrivateData() </span>함수를
통해서 이미지 정보를 가져와 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>HRESULT</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>CMain</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>Render</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dSize=
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dData=
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXIMAGE_INFO</span><span lang=EN-US>* pData;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pTex1-&gt;</span><span
lang=EN-US style='color:#880000'>GetPrivateData</span><span lang=EN-US>(IID_ILcTexInfo,
&amp;dData, &amp;dSize);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pData = (</span><span
lang=EN-US style='color:blue'>D3DXIMAGE_INFO</span><span lang=EN-US>*)dData;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>RECT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; rc1={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, pData-&gt;Width, pData-&gt;Height};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pd3dSprite-&gt;</span><span lang=EN-US
style='color:#880000'>Draw</span><span lang=EN-US>(m_pTex1, &amp;rc1, …);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 동적 할당으로 만든<span lang=EN-US> Private Data</span>는 프로그램 해제할
때 같이 소멸시켜야 하는 것은 당연합니다<span lang=EN-US>. </span>또한 <span lang=EN-US>FreePrivateData()
</span>함수를 호출해서<span lang=EN-US> Private Data </span>사용을 해제합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>HRESULT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMain</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Destroy</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dData=
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXIMAGE_INFO</span><span lang=EN-US>* pData;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pTex1-&gt;</span><span
lang=EN-US style='color:#880000'>GetPrivateData</span><span lang=EN-US>( IID_ILcTexInfo,
&amp;dData, &amp;dSize);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pTex1-&gt;</span><span
lang=EN-US style='color:#880000'>FreePrivateData</span><span lang=EN-US>(IID_ILcTexInfo);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>pData</span><span
lang=EN-US> = (</span><span lang=PT-BR style='color:blue'>D3DXIMAGE_INFO</span><span
lang=EN-US>*)</span><span lang=PT-BR>dData</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>delete </span><span lang=PT-BR>pData</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>전체 코드는 <span lang=PT-BR><a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux05_texture3_privatedata.zip">daux05_texture3_privatedata.zip</a> </span>파일을
참고 하기 바랍니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR><img border=0 width=272 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image023.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Private Data: </span><span lang=PT-BR><a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux05_texture3_privatedata.zip"><span lang=EN-US>daux05_texture3_privatedata.zip</span></a></span><span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>SetPrivateData() </span>함수를 호출할 때 첫 번째 인수는 구이드
번호<span lang=EN-US>(Guid Number) </span>라는 값으로 윈도우 시스템에서 만든 유일 값을 보장하는 수입니다<span
lang=EN-US>. Visual Studio</span>는 구이드 번호를 생성하는 프로그램이<span lang=EN-US>
GuidGen.exe </span>또는<span lang=EN-US> uuidGen.exe </span>가 있습니다<span
lang=EN-US>. 2005 </span>버전의<span lang=EN-US> GuidGen.exe</span>를 찾아서 실행하면 다음 윈도우가
실행이 되며<span lang=EN-US> Copy </span>버튼을 눌러 구이드 번호를 복사 합니다<span lang=EN-US>. New
GUID </span>버튼을 누를 때마다 전세계에서 하나 밖에 없는 번호를 만들어 냅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=293 height=212
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image024.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;GuidGen.exe&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 번호를 복사 해서 다음과 같이 <span lang=PT-BR style='color:blue'>GUID</span><span
lang=PT-BR> </span>구조체에 채워서<span lang=EN-US> SetPrivateData(), GetPrivateData()
</span>함수 호출의 인수로 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:blue'>GUID</span><span
lang=PT-BR> </span><span lang=PT-BR>IID_ILcTexInfo</span><span lang=EN-US> ={</span><span
lang=PT-BR style='color:red'>0x85c31227</span><span lang=EN-US>, </span><span
lang=PT-BR style='color:red'>0x3de5</span><span lang=EN-US>, </span><span
lang=PT-BR style='color:red'>0x4f00</span></p>

<p class=MsoNormal style='margin-left:80.0pt;text-indent:40.0pt'><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0x9b</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0x3a</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0xf1</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0x1a</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0xc3</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0x8c</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0x18</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:red'>0xb5</span><span
lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.5.4 Targa </span><span
style='font-size:14.0pt'>와<span lang=EN-US> PNG</span></span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>는<span lang=EN-US> DXSDK</span>에서
이미지를 불러오는 함수가 지원이 있어 이미지를 읽고 쓰는 일들을 고민 안 해도 됩니다<span lang=EN-US>. </span>그런데 만약<span
lang=EN-US> D3D</span>로 모바일 등의 기기에 이식하기 위한 <span lang=EN-US>Emulator</span>를 만든다고
한다면 이 기기의 환경에 맞는 이미지 형식으로 코딩을 해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>여러 이미지 포맷 중에서 가장 많이 사용하는 포맷은<span lang=EN-US> Targa </span>형식입니다<span
lang=EN-US>. Targa </span>파일은 읽고 쓰기가 편리해서 대부분의 게임 프로그래밍 책에 소개가 되어 있습니다<span
lang=EN-US>. D3D</span>를 공부하는 여러분도<span lang=EN-US> Targa </span>파일 만큼은<span
lang=EN-US> DXSDK </span>함수를 사용하지 않고 읽고 쓰는 법을 나중에라도 연습하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux05_texture4_ToTarga.zip">daux05_texture4_ToTarga.zip</a>
</span>파일은<span lang=EN-US> PNG </span>파일을<span lang=EN-US> D3D </span>함수로 읽은 후에
서피스의 픽셀을 얻어와<span lang=EN-US> Targa</span>로 저장하는 예제 입니다<span lang=EN-US>. Targa</span>의
읽고 쓰는 방법은 거의 일정합니다<span lang=EN-US>. </span>따라서 소스 코드만 보더라도 누구나 쉽게 이해 할 수 있습니다<span
lang=EN-US>. </span>그래서<span lang=EN-US> Targa</span>에 대한 자세한 설명은 생략하고 주의점 정도만 보겠습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Targa </span>파일을 읽는 방법은 고정이 되어 있어서 어떤 코드를 얻더라도
거의 같은 방식으로 구성되어 있습니다<span lang=EN-US>. </span>그런데 주의할 점은 픽셀을 읽어 오고 나서 이 픽셀이<span
lang=EN-US> 24</span>비트 이면<span lang=EN-US> 32 </span>비트로 바꾸어 사용하는 것이 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>다음 코드의<span lang=EN-US> for </span>문에서 이러한 일을 처리하고 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INT</span><span
lang=EN-US> </span><span lang=EN-US style='color:#880000'>LoadTGAFile</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>fp = </span><span lang=EN-US
style='color:#880000'>fopen</span><span lang=EN-US>(filename, </span><span
lang=EN-US style='color:fuchsia'>&quot;rb&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>// read bit depth</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>fread</span><span
lang=EN-US>(&amp;ImgBit, </span><span lang=EN-US style='color:blue'>sizeof</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>BYTE</span><span
lang=EN-US>), </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>, fp);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>// colormode -&gt; 3 = BGR, 4 = BGRA</span></p>

<p class=MsoNormal><span lang=EN-US>colorMode = ImgBit / </span><span
lang=PT-BR style='color:red'>8</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>// bgr -&gt;bgra</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>if</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>3</span><span lang=EN-US>
== colorMode)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>* pPixel4&nbsp; = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>[ImgWidth * ImgHeight
* </span><span lang=EN-US style='color:red'>4</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> (</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> i = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i &lt; imageSize/</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> idx1 =&nbsp; i*</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> idx2 =&nbsp; i*</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPixel4[idx2+</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = pPixel[idx1 + </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPixel4[idx2+</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = pPixel[idx1 + </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPixel4[idx2+</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = pPixel[idx1 + </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPixel4[idx2+</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:red'>0xFF</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>는 색상<span lang=EN-US> 32 </span>비트의
순서가 낮은 바이트부터<span lang=EN-US> B-&gt;G-&gt;R-&gt;A </span>순으로 되어 있습니다<span
lang=EN-US>. </span>만약 색상의 순서가<span lang=EN-US> A-&gt;R-&gt;G-&gt;B</span>로 구성되어
있는 시스템에서는 앞의 코드<span lang=EN-US> for </span>문에서 이 순서를 바꾸어 주면 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>pPixel4[idx2+</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>] = pPixel[idx1 + </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>pPixel4[idx2+</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>] = pPixel[idx1 + </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>pPixel4[idx2+</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>] = pPixel[idx1 + </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>pPixel4[idx2+</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>] = pPixel[idx1 + </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] </span>또는 <span
lang=EN-US style='color:red'>0xFF</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 픽셀의 순서를 바꾸는 일은 다른 플랫폼에 이식할 때 또는 파일 형식이 다른 경우에 종종 발생합니다<span
lang=EN-US>. </span>다음의 예는<span lang=EN-US> DXSDK </span>함수로 생성한 텍스처를 <span
lang=EN-US>Targa</span>가 형식으로 저장하는 함수 입니다<span lang=EN-US>. </span>픽셀을 파일에 저장할 때
<span lang=EN-US>Targa </span>파일은 <span lang=EN-US>for </span>문 안에서<span
lang=EN-US> ARGB </span>형식을<span lang=EN-US> BGRA</span>로 바꾸고 있음을 볼 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INT</span><span
lang=EN-US> </span><span lang=EN-US style='color:#880000'>SaveTGAFile</span><span
lang=EN-US>(…)</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:green'>// ARGB -&gt; BGRA</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:blue'>BYTE</span><span
lang=PT-BR> *b, *g, *r, *a;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>for</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US> j=</span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>; j&lt;imageHeight; ++j)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;imageWidth; ++i)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>* pData = pPixel +
(&nbsp; (imageHeight-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>-j)*RealWidth + i)*</span><span lang=EN-US style='color:red'>4</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a
= pData + </span><span lang=PT-BR style='color:red'>3</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r
= pData + </span><span lang=PT-BR style='color:red'>2</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g
= pData + </span><span lang=PT-BR style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b
= pData + </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(b, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>), </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, fp);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(g, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>), </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, fp);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(r, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>), </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, fp);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(a, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>), </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, fp);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux05_texture4_ToTarga.zip">daux05_texture4_ToTarga.zip</a>
</span>의 압축을 풀면 다음 그림의 왼쪽처럼<span lang=EN-US> PNG </span>파일을 불러와서<span
lang=EN-US> Targa</span>로 저장한 프로그램<span lang=EN-US> Mck.exe</span>가 있습니다<span
lang=EN-US>. PNG </span>파일의 압축에 대한 알고리즘과 코드는 공개되어 있습니다<span lang=EN-US>. </span>오른쪽
그림은 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/http://zlib.net/" target="_blank">http://zlib.net/</a>
</span>사이트에서<span lang=EN-US> PNG </span>파일의 입출력 코드를 얻어와 라이브러리를 만들어 <span
lang=EN-US>DC</span>에 적용시킨 화면입니다<span lang=EN-US>. wn_56_ReadPng </span>폴더에 헤더<span
lang=EN-US>, </span>라이브러리<span lang=EN-US>, </span>실행 파일<span lang=EN-US>
McApi.exe</span>가 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=263 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image025.gif">&nbsp;<img border=0 width=263 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image026.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt; Targa </span>파일 저장과<span lang=EN-US>
PNG </span>로드<span lang=EN-US>: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux05_texture4_ToTarga.zip">daux05_texture4_ToTarga.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3.6 Anti-Aliasing</span></p>

<p class=MsoNormal><span lang=EN-US>Aliasing</span>은 고해상도 데이터가 저해상도 데이터로 샘플링 되는
것을<span lang=EN-US> Aliasing</span>이라 했습니다<span lang=EN-US>. </span>이 문제를 해결하는<span
lang=EN-US> Anti-Aliasing</span>중에서 수퍼 샘플링 또는 멀티 샘플링 처리를 간단히 배웠습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>하드웨어가 얼마만큼의 멀티 샘플링 타입을 지원하는지 알아보려면 다음과 같이 최대 값부터 성공할 때까지 검사하면
됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US> dQualityLevels;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> nType=</span><span lang=EN-US
style='color:#A000A0'>D3DMULTISAMPLE_16_SAMPLES</span><span lang=EN-US>;
nType&gt;=</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;
--nType)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>SUCCEEDED</span><span lang=EN-US>(m_pD3D-&gt;</span><span
lang=EN-US style='color:#880000'>CheckDeviceMultiSampleType</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>D3DADAPTER_DEFAULT</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>D3DDEVTYPE_HAL</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
m_d3dpp.BackBufferFormat</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>TRUE</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
(</span><span lang=EN-US style='color:#A000A0'>D3DMULTISAMPLE_TYPE</span><span
lang=EN-US>)nType</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;dQualityLevels)))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_d3dpp.MultiSampleType
= (</span><span lang=EN-US style='color:#A000A0'>D3DMULTISAMPLE_TYPE</span><span
lang=EN-US>)nType;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_d3dpp.MultiSampleQuality
= dQualityLevels-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>break</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 찾은 후에 디바이스를 생성하면 되며 자동으로<span lang=EN-US> Anti-aliasing</span>이
적용이 됩니다<span lang=EN-US>. </span>화면의 전환에서 디바이스는 리셋이 되므로 다음과 같이<span lang=EN-US>
Anti-aliasing</span>을 활성화 시켜야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pd3dDevice-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US> (</span><span
lang=EN-US style='color:#A000A0'>D3DRS_MULTISAMPLEANTIALIAS</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>TRUE</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pd3dDevice-&gt;</span><span lang=EN-US
style='color:#880000'>SetRenderState</span><span lang=EN-US> (</span><span
lang=EN-US style='color:#A000A0'>D3DRS_ANTIALIASEDLINEENABLE</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>TRUE</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux06_antialias1.zip">daux06_antialias1.zip</a></span>을
참고 하기 바랍니다<span lang=EN-US>. </span>다음 그림은<span lang=EN-US> Anti-aliasing</span>에
대한 예제 입니다<span lang=EN-US>. F2, F3 </span>키를 누르면<span lang=EN-US> Anti-aliasing</span>의
비활성화<span lang=EN-US>/</span>활성화를 설정 할 수 있습니다<span lang=EN-US>. </span>오른쪽 그림을 보면<span
lang=EN-US> Anti-aliasing</span>을 활성화 하면 렌더링 속도가 감소된 것을 볼 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=273 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image027.jpg">&nbsp;<img border=0 width=272 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image028.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Anti-aliasing: <a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux06_antialias1.zip">daux06_antialias1.zip</a>, </span><span
lang=PT-BR><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux06_antialias2.zip"><span lang=EN-US>daux06_antialias2.zip</span></a></span><span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3.7 ID3DXMesh </span><span
style='font-size:16.0pt'>와 <span lang=EN-US>X-file</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.7.1 ID3DXMesh</span></p>

<p class=MsoNormal><span lang=EN-US>Tutorial </span>예제와 주전자<span lang=EN-US>, </span>원통
등 확장 유틸리티를 통해서<span lang=EN-US> ID3DXMesh</span>의 사용을 배웠습니다<span lang=EN-US>.
ID3DXMesh</span>는 장면의 연출에 필요한 기본적인 정점 버퍼와 인덱스 버퍼를 가지고 있고<span lang=EN-US>, </span>렌더링
속도를 올리기 위해서 삼각형의 인덱스를 그룹<span lang=EN-US>(Group)</span>으로 묶어 놓은 속성 버퍼를 가지고 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>보통 하나의 삼각형에 재질<span lang=EN-US>(Material) </span>또는 텍스처<span
lang=EN-US>(</span>같은 단계<span lang=EN-US>(stage)</span>일 경우<span lang=EN-US>)</span>는<span
lang=EN-US> 1</span>개 밖에 설정이 불가능합니다<span lang=EN-US>. </span>만약 하나의 렌더링 오브젝트에 재질이
여러 개의 경우라면 각 정점을 재질에 맞게 분류해야 합니다<span lang=EN-US>. </span>이렇게 되면 재질만 다른 같은 삼각형이라도
복사를 해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>속성 버퍼는 재질이 여러 개인 경우에 정점 버퍼를 각각 분리하지 않고<span lang=EN-US>, </span>각
재질에 따른 삼각형의 인덱스를 모아 놓은 자료 구조입니다<span lang=EN-US>. </span>속성 버퍼를 사용하면 정점 버퍼와 인덱스
버퍼를 그대로 유지하면서 서로 다른 재질 또는 텍스처를 적용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=611 height=206
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image029.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>속성 테이블<span lang=EN-US>, </span>속성
버퍼<span lang=EN-US>, </span>인덱스 버퍼<span lang=EN-US>, </span>정점 버퍼<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXMesh </span>객체를 렌더링 할 때<span
lang=EN-US> DrawSubset() </span>함수를 호출한 적이 있습니다<span lang=EN-US>. DrawSubset() </span>함수의
인수에 전달하는 인덱스가 속성 테이블에 기록된 인덱스 입니다<span lang=EN-US>. </span>속성 테이블에는 아이디<span
lang=EN-US>, Face </span>시작 인덱스<span lang=EN-US>, Face </span>개수<span
lang=EN-US>, </span>정점의 시작 인덱스 정점의 개수가 기록되어 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>인덱스 버퍼를 만들 때<span lang=EN-US> WORD </span>또는<span
lang=EN-US> DWORD</span>형의 자료 구조를 그대로 사용하지 않고 다음과 같은 구조체를 사용한다면<span
lang=EN-US> Face </span>인덱스와 이 구조체의 인덱스를 동일하게 맞출 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxIdx</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>WORD </span><span lang=EN-US>a;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>WORD</span><span lang=EN-US> b;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>WORD</span><span lang=EN-US> c;</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>삼각형의 면<span lang=EN-US>(Face)</span>를 구성하는 구조체가 없다면 여러분은 프로그램을
작성할 때 계산을 잘 해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>연습을 위해 텍스처가 매핑 된<span lang=EN-US> 6 </span>면체 <span
lang=EN-US>ID3DXMesh </span>객체로 렌더링 해봅시다<span lang=EN-US>. </span>먼저 다음 같은<span
lang=EN-US> ID3DXMesh </span>객체를 선언합니다<span lang=EN-US>. </span>그리고<span
lang=EN-US> 6</span>면에 대해서<span lang=EN-US> 6</span>장의 텍스처를 매핑 하는 것으로 하겠습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ID3DXMesh</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pMsh;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_nMtl;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_pTex[</span><span lang=EN-US
style='color:red'>6</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음 단계에서 <span lang=EN-US>Face</span>의 개수<span lang=EN-US>, </span>정점
개수<span lang=EN-US>, FVF </span>등을 <span lang=EN-US>D3DXCreateMeshFVF() </span>함수의
인수로 전달하고 메쉬 객체를 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>D3DXCreateMeshFVF</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>&quot;</span><span
style='color:red'>정점의 개수<span lang=EN-US>&quot;</span></span><span lang=EN-US>,
</span><span lang=EN-US style='color:red'>&quot;Face</span><span
style='color:red'>의 개수<span lang=EN-US>&quot;</span></span><span lang=EN-US>, …,
</span><span lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US>, …,
&amp;m_pMsh);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 함수는 메쉬 객체의 정점과 인덱스의 공간을 만듭니다<span lang=EN-US>. </span>다음으로<span
lang=EN-US> Lock()/Unlock() </span>함수로 정점 또는 인덱스의 데이터를 변경합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VtxUV1</span><span lang=EN-US> pVtxS[</span><span
lang=EN-US style='color:red'>24</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pVtxS[ </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:blue'>VtxUV1</span><span lang=EN-US>(-</span><span
lang=EN-US style='color:red'>6.F</span><span lang=EN-US>, -</span><span
lang=EN-US style='color:red'>6.F</span><span lang=EN-US>, -</span><span
lang=EN-US style='color:red'>6.F</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:red'>0.f</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0.f</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pVtxS[ </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:blue'>VtxUV1</span><span lang=EN-US>(-</span><span
lang=EN-US style='color:red'>6.F</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:red'>6.F</span><span lang=EN-US>, -</span><span
lang=EN-US style='color:red'>6.F</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:red'>0.f</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>1.f</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VtxIdx</span><span lang=EN-US> pIdxS[</span><span
lang=EN-US style='color:red'>12</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pIdxS[ </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>(&nbsp; </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>pIdxS[ </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>] = </span><span lang=EN-US
style='color:blue'>VtxIdx</span><span lang=EN-US>(&nbsp; </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점<span lang=EN-US>, </span>인덱스
복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VtxUV1</span><span lang=EN-US>* pVtx = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>LockVertexBuffer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>**)&amp;pVtx);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>memcpy</span><span lang=EN-US>(pVtx, pVtxS, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VtxUV1</span><span lang=EN-US>) * </span><span
lang=EN-US style='color:red'>24</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pMsh-&gt;</span><span lang=EN-US
style='color:#880000'>UnlockVertexBuffer</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VtxIdx</span><span lang=EN-US>* pIdx = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>LockIndexBuffer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>**)&amp;pIdx);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>memcpy</span><span lang=EN-US>(pIdx, pIdxS, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>) * </span><span
lang=EN-US style='color:red'>12</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pMsh-&gt;</span><span lang=EN-US
style='color:#880000'>UnlockIndexBuffer</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점과 인덱스 설정 만으로도 렌더링은 가능합니다<span lang=EN-US>. </span>매핑 여러 개라면
다음과 같이 속성 버퍼의 내용을 갱신합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>* attBuf = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>LockAttributeBuffer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, &amp;attBuf);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>attBuf[ </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>attBuf[ </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>UnlockAttributeBuffer</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>앞서 인덱스 버퍼를 구성할 때 <span lang=EN-US>VtxIdx</span>와 같은 구조체를 사용하는
것이 좋다고 했습니다<span lang=EN-US>. </span>삼각형에 대해서 속성 버퍼에 기록하는 인덱스는<span lang=EN-US>
VtxIdx </span>인덱스와 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>마지막 단계에서 속성 버퍼에 저장된 삼각형의 인덱스에 맞추어 렌더링 속도를 위해 최적화를 합니다<span
lang=EN-US>. </span>이 단계는 선택 사항이며 만약 사용자가 속성 버퍼를 잘 구성 했다면 할 필요는 없습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>* pAdjacencyBuf = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>12</span><span lang=EN-US> * </span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>GenerateAdjacency</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.f, pAdjacencyBuf);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>OptimizeInplace</span><span lang=EN-US>(</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>D3DXMESHOPT_ATTRSORT</span><span lang=EN-US> |
</span><span lang=EN-US style='color:#A000A0'>D3DXMESHOPT_COMPACT</span><span
lang=EN-US> | </span><span lang=EN-US style='color:#A000A0'>D3DXMESHOPT_VERTEXCACHE</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
pAdjacencyBuf, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>delete</span><span
lang=EN-US> [] pAdjacencyBuf;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>OptimizeInplace() </span>함수의 최적화 옵션은 다음과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><a name="D3DXMESHOPT_COMPACT"><span lang=EN-US>D3DXMESHOPT_COMPACT</span></a><span
lang=EN-US>: </span>사용하지 않는 정점과 인덱스를 지우고 재 구성 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><a name="D3DXMESHOPT_ATTRSORT"><span lang=EN-US>D3DXMESHOPT_ATTRSORT</span></a><span
lang=EN-US>: </span>속성 버퍼의 내용을 참고해서<span lang=EN-US> Face(</span>삼각형<span
lang=EN-US>) </span>정렬 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><a name="D3DXMESHOPT_VERTEXCACHE"><span lang=EN-US>D3DXMESHOPT_VERTEXCACHE</span></a><span
lang=EN-US>: Face</span>를 재구성해서 버텍스 캐시에 대한 적중률을 높입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><a name="D3DXMESHOPT_STRIPREORDER"><span lang=EN-US>D3DXMESHOPT_STRIPREORDER</span></a><span
lang=EN-US>: </span>가능한 한 커다란 스트립으로 구성하도록 인덱스를 재 구성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><a name="D3DXMESHOPT_IGNOREVERTS"><span lang=EN-US>D3DXMESHOPT_IGNOREVERTS</span></a><span
lang=EN-US>: </span>버텍스 정보는 무시하고 인덱스 정보만 최적화 합니다</p>

<p class=MsoNormal><a name="D3DXMESHOPT_DONOTSPLIT"><span lang=EN-US>D3DXMESHOPT_DONOTSPLIT</span></a><span
lang=EN-US>: </span>속성의 정렬 중에서 속성 그룹 사이에 공유되고 있는 정점들은 분할 안 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><a name="D3DXMESHOPT_DEVICEINDEPENDENT"><span lang=EN-US>D3DXMESHOPT_DEVICEINDEPENDENT</span></a>는
정점 캐시의 사이즈에 영향을 주며 하드웨어에서 문제 발생을 없애기 위해 디폴트 정점 캐시 사이즈가 지정됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>속성 테이블의 내용을 알기 위해서 <span lang=EN-US>GetAttributeTable() </span>함수를
사용합니다<span lang=EN-US>. </span>이 함수를 사용하려면 먼저 다음과 같이 먼저 테이블 수를 가져오고 테이블 내용을 기록할
버퍼를 동적으로 만든 다음 이 버퍼와 테이블 수를 인수로 <span lang=EN-US>GetAttributeTable() </span>함수를
호출하면 내용을 가져올 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp; nNumSubset=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr= m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>GetAttributeTable</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, &amp;nNumSubset);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXATTRIBUTERANGE</span><span lang=EN-US>* attTable= </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXATTRIBUTERANGE</span><span lang=EN-US>[nNumSubset];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr= m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>GetAttributeTable</span><span lang=EN-US>(attTable,
&amp;nNumSubset);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>delete</span><span
lang=EN-US> [] attTable; </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_nMtl = nNumSubset;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 내용은 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_mesh01.zip">daux07_mesh01.zip</a></span>을
참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=273 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image030.gif">&nbsp;<img border=0 width=273 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image031.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>사용자 정의에 의한<span lang=EN-US>
ID3DXMesh: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_mesh01.zip">daux07_mesh01.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXMesh</span>를 이용해서 장면을 연출하지 않고 메쉬 데이터를 복사해서
사용할 경우도 있습니다<span lang=EN-US>. </span>이 때 메쉬 객체 내부의 데이터를 가져오기 위해서 최소한 다음과 같은 지오메트리
구조체와 멤버 변수를 가지고 있어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>지오메트리<span lang=EN-US>(Geometry) </span>구조체는<span
lang=EN-US> ID3DXMesh </span>객체의<span lang=EN-US> Subset</span>과<span
lang=EN-US> 1:1 </span>관계입니다<span lang=EN-US>. </span>렌더링에 필요한<span lang=EN-US>
Face </span>숫자와<span lang=EN-US>, Face </span>리스트가 필요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>McGeo</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Geometry</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; nFce;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Face </span><span style='color:green'>숫자</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; nVtx;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 숫자</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>* pIdx;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Face </span><span style='color:green'>리스트</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지오메트리를 가지고 있을 클래스의 멤버 변수는 지오메트리의 숫자와 데이터를 가져야 하고<span
lang=EN-US>, ID3DXMesh </span>객체에서 정점 버퍼를 복사해와야 하므로 정점의 수<span lang=EN-US>, </span>정점
하나의 크기<span lang=EN-US>, FVF, </span>정점 버퍼를 있어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_nGeo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>지오메트리 수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>McGeo</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pGeo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>지오메트리</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>UINT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_nVtx;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 개수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>UINT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_dVtx;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 하나의 크기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_dFVF;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// FVF</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>void</span><span
lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pVtx;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 버퍼</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXMesh </span>객체에서 데이터를 꺼내오는 방법은 다음과 같이 먼저
정점의 수<span lang=EN-US>, </span>인덱스<span lang=EN-US>(Face)</span>의 수를 얻어 옵니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ID3DXMesh</span><span lang=EN-US>* pMeshSrc = </span><span
lang=EN-US style='color:red'>&quot;ID3DXMesh </span><span style='color:red'>객체 생성
함수<span lang=EN-US>&quot;</span></span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; nVtxS=
pMeshSrc-&gt;</span><span lang=EN-US style='color:#880000'>GetNumVertices</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; nFceS=
pMeshSrc-&gt;</span><span lang=EN-US style='color:#880000'>GetNumFaces</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>렌더링에 필요한 정점 하나의 크기<span
lang=EN-US>, FVF, </span>정점 버퍼를 생성합니다<span lang=EN-US>. </span>정점의 포맷은 알지 못하기 때문에<span
lang=EN-US> malloc() </span>함수 등으로 메모리만 확보합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>m_nVtx&nbsp; =
nVtxS;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_dVtx&nbsp; =
(</span><span lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>)pMeshSrc-&gt;</span><span
lang=EN-US style='color:#880000'>GetNumBytesPerVertex</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_dFVF&nbsp; =
pMeshSrc-&gt;</span><span lang=EN-US style='color:#880000'>GetFVF</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pVtx&nbsp; = </span><span
lang=EN-US style='color:#880000'>malloc</span><span lang=EN-US>(m_nVtx *
m_dVtx);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>ID3DXMesh </span>객체에서
정점을 복사합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VtxUV1</span><span lang=EN-US>* pVtxS=</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pMeshSrc-&gt;</span><span
lang=EN-US style='color:#880000'>LockVertexBuffer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>**)&amp;pVtxS);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>memcpy</span><span lang=EN-US>(m_pVtx, pVtxS, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VtxUV1</span><span lang=EN-US>) * nVtxS);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pMeshSrc-&gt;</span><span
lang=EN-US style='color:#880000'>UnlockVertexBuffer</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>인덱스는 지오메트리에 기록될 것입니다<span
lang=EN-US>. </span>따라서<span lang=EN-US> ID3DXMesh</span>에 있는 인덱스는 임시 버퍼를 만들고 여기에
복사합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VtxIdx</span><span lang=EN-US>* pFce = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>[nFceS];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VtxIdx</span><span lang=EN-US>* pIdxS=</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pMeshSrc-&gt;</span><span
lang=EN-US style='color:#880000'>LockIndexBuffer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>**)&amp;pIdxS);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>memcpy</span><span lang=EN-US>(pFce, pIdxS, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>) * nFceS);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pMeshSrc-&gt;</span><span
lang=EN-US style='color:#880000'>UnlockIndexBuffer</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>지오메트리 객체의 내용을 설정하기 위해서 속성 테이블의 개수와
내용을 가져옵니다<span lang=EN-US>. </span>속성 테이블의 숫자는 지오메트리의 숫자와 동일하게 하고 이 개수만큼 지오메트리를
만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp; nNumSubset=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr=
pMeshSrc-&gt;</span><span lang=EN-US style='color:#880000'>GetAttributeTable</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>,
&amp;nNumSubset);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Geometry </span><span style='color:green'>숫자를 설정한다<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_nGeo =
nNumSubset;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pGeo = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>McGeo</span><span lang=EN-US>[m_nGeo];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXATTRIBUTERANGE</span><span lang=EN-US>* attTable = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXATTRIBUTERANGE</span><span lang=EN-US>[nNumSubset];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr=
pMeshSrc-&gt;</span><span lang=EN-US style='color:#880000'>GetAttributeTable</span><span
lang=EN-US>(attTable, &amp;nNumSubset);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>속성 테이블의 내용을 가지고 지오메트리의 인덱스<span
lang=EN-US>(Face)</span>를 구성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;m_nGeo; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>McGeo</span><span lang=EN-US>* pGeo =
&amp;m_pGeo[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;nFce&nbsp;&nbsp;&nbsp;&nbsp; =
attTable[i].FaceCount;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;nVtx&nbsp;&nbsp;&nbsp;&nbsp; =
attTable[i].VertexCount;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;nFceB&nbsp;&nbsp;&nbsp; =
attTable[i].FaceStart;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Geometry</span><span style='color:green'>의 인덱스
버퍼 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pIdx&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>[pGeo-&gt;nFce];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Index Buffer </span><span style='color:green'>복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>* pIdxDst = pFce +
pGeo-&gt;nFceB;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>memcpy</span><span lang=EN-US>(pGeo-&gt;pIdx,
pIdxDst, </span><span lang=EN-US style='color:blue'>sizeof</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>VtxIdx</span><span
lang=EN-US>) * pGeo-&gt;nFce);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>장면을 구성할 정점 버퍼<span lang=EN-US>, </span>지오메트리의
내용을 다 채웠습니다<span lang=EN-US>. ID3DXMesh</span>객체와 임시로 사용한 인덱스 버퍼<span
lang=EN-US>, </span>속성테이블은 해제합니다<span lang=EN-US>. </span>렌더링은 다음과 같이 정점 버퍼와 지오메트리의
정보를 이용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>for</span><span
lang=EN-US>(i = </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>; i &lt; m_nGeo; i++)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>McGeo</span><span lang=EN-US>* pGeo = &amp;m_pGeo[i];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTexture</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_pTex[i] );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetFVF</span><span lang=EN-US>(m_dFVF);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>DrawIndexedPrimitiveUP</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DPT_TRIANGLELIST</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_nVtx</span></p>

<p class=MsoNormal align=left style='margin-left:80.0pt;text-align:left;
text-indent:40.0pt;word-break:keep-all'><span lang=EN-US>, pGeo-&gt;nFce, pGeo-&gt;pIdx,
</span><span lang=EN-US style='color:#A000A0'>D3DFMT_INDEX16</span><span
lang=EN-US>, m_pVtx, m_dVtx);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_mesh02.zip">daux07_mesh02.zip</a></span>을
참고하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=272 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image032.gif">&nbsp;<img border=0 width=272 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image033.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;ID3DXMesh </span>객체의 내용을 복사한 지오메트리로 렌더링<span
lang=EN-US>: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_mesh02.zip">daux07_mesh02.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>DXSDK</span>는 연속된 정점 데이터에 대해서 충돌에 대한 경계상자<span
lang=EN-US>(Bounding Box)</span>와 경계 구<span lang=EN-US>(Bounding Sphere)</span>를
구해주는 함수가 있습니다<span lang=EN-US>. </span>만약<span lang=EN-US> ID3DXMesh </span>객체에
대한<span lang=EN-US> Bounding Box, Sphere</span>는 다음과 같이 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>* pVtx=</span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXVECTOR3 </span><span lang=EN-US>vcMax; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3 </span><span lang=EN-US>vcMin; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3 </span><span lang=EN-US>vcCenter; </span><span
lang=EN-US style='color:blue'>FLOAT </span><span lang=EN-US>fRadius;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US> nVtx&nbsp;&nbsp;&nbsp;&nbsp; =
m_pMsh-&gt;</span><span lang=EN-US style='color:#880000'>GetNumVertices</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US> dFVF&nbsp;&nbsp;&nbsp;&nbsp; =
m_pMsh-&gt;</span><span lang=EN-US style='color:#880000'>GetFVF</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US> dStride&nbsp; = </span><span
lang=EN-US style='color:#880000'>D3DXGetFVFVertexSize</span><span lang=EN-US>(dFVF);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pMesh-&gt;</span><span
lang=EN-US style='color:#880000'>LockVertexBuffer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DLOCK_READONLY</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>**)&amp;pVtx);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXComputeBoundingBox</span><span lang=EN-US>((</span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>*)pVtx, nVtx, dStride,
&amp;vcMin, &amp;vcMax);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>D3DXComputeBoundingSphere</span><span
lang=EN-US>((</span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>*)pVtx, nVtx, dStride, &amp;vcCenter, &amp;fRadius);</span></p>

<p class=MsoNormal><span lang=EN-US>pMesh-&gt;</span><span lang=EN-US
style='color:#880000'>UnlockVertexBuffer</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.7.2 X-file</span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>기초<span lang=EN-US> Tutorial</span>에서
호랑이 <span lang=EN-US>X-file</span>을 우리는 화면에 올려 보았습니다<span lang=EN-US>. X-file </span>장면에
대한 렌더링 오브젝트의 정보를 가지고 있는 <span lang=EN-US>X-file</span>에 대한 해석은<span lang=EN-US>
DXSDK</span>에서 지원 되어 별도의 노력이 필요 없습니다<span lang=EN-US>. </span>다루기가 쉬워서 게임 개발 기간
중에 테스트 파일로 가장 많이 사용되는 포맷입니다<span lang=EN-US>. </span>게임 회사는 오브젝트에 대한 자체 포맷이 있습니다<span
lang=EN-US>. </span>그런데 이 포맷을 개발하는 단계에서 제대로 작동하는지 비교를 하기 위해서 <span lang=EN-US>X-file</span>을
가장 많이 사용합니다<span lang=EN-US>. </span>게임 프로그래밍을 처음 배우는 사람들도 게임 오브젝트를 <span
lang=EN-US>X-file</span>로 많이 가져갑니다<span lang=EN-US>. </span>따라서 <span
lang=EN-US>X-file</span>에 대한 클래스를 만들어 놓는 것은 필 수 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>클래스를 만들기 위해 필요한 자료구조를 모으니 다음과 같이 메쉬<span lang=EN-US>, </span>재질<span
lang=EN-US>, </span>텍스처 객체로 모아집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMcXFile</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DDEVICE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_sFile[</span><span
lang=EN-US style='color:#A000A0'>MAX_PATH</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>ID3DXMesh</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pMsh;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DMATERIAL9</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pMtl;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp; m_pTex;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_nMtl;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>파일에서 <span lang=EN-US>D3DXLoadMeshFromX() </span>함수로 메쉬를 읽어오는
것은 호랑이를 올려 보았으면 이미 알고 있는 내용입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ID3DXBuffer</span><span lang=EN-US>* AdjBuf = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>ID3DXBuffer</span><span
lang=EN-US>* MtlBuf = </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#A000A0'>D3DXLoadMeshFromX</span><span lang=EN-US>(sFile,
</span><span lang=EN-US style='color:#A000A0'>D3DXMESH_SYSTEMMEM</span><span
lang=EN-US>, m_pDev</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;AdjBuf, &amp;MtlBuf, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, &amp;nMtl, &amp;m_pMsh);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다음으로 <span lang=EN-US>ID3DXMesh</span>에서
배운 삼각형의 인접 정보를 이용한 최적화를 진행합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US> dOpt&nbsp; = </span><span
lang=EN-US style='color:#A000A0'>D3DXMESHOPT_ATTRSORT</span><span lang=EN-US> |
</span><span lang=EN-US style='color:#A000A0'>D3DXMESHOPT_COMPACT</span><span
lang=EN-US> | </span><span lang=EN-US style='color:#A000A0'>D3DXMESHOPT_VERTEXCACHE</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>* pAdj = (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>*)AdjBuf-&gt;</span><span
lang=EN-US style='color:#880000'>GetBufferPointer</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>OptimizeInplace</span><span lang=EN-US>(dOpt, pAdj,
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>DXSDK</span>의 <span lang=EN-US>ID3DXBuffer </span>인터페이스는
자료를 연속적인 메모리 공간에 저장하기 위해서 범용적으로 만든 자료 구조입니다<span lang=EN-US>. ID3DXBuffer </span>인터페이스는
자료 자체를 가져오는<span lang=EN-US> GetBufferPointer()</span>와 저장된 자료의 크기<span
lang=EN-US>(Byte)</span>를 가져오는<span lang=EN-US> GetBufferSize() </span>함수가 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>GetBufferPointer() </span>함수로 자료의 시작 주소를 가져와서
필요한 경우에 캐스팅해서 사용합니다<span lang=EN-US>. ID3DXBuffer </span>객체의<span lang=EN-US>
Release() </span>함수를 호출하면 <span lang=EN-US>ID3DXBuffer </span>객체 내부에 저장된 자료들도 같이
소멸합니다<span lang=EN-US>. </span>이 객체는 이후 쉐이더에서 에러 등의 메시지를 반환 받을 때도 사용됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>D3DXCreateBuffer() </span>라는 함수를 사용해서 직접 연속된
메모리를 확보할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>삼각형 최적화가 끝나면 재질과 텍스처를 생성하고 재질 먼저 복사 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>재질과 텍스처 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pMtl = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DMATERIAL9</span><span lang=EN-US>[m_nMtl];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pTex = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>[m_nMtl];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>텍스처 포인터 초기화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>memset</span><span lang=EN-US>(m_pTex, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>) *m_nMtl);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>재질 데이터 가져옴</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXMATERIAL</span><span lang=EN-US>* pMtl = (</span><span
lang=EN-US style='color:blue'>D3DXMATERIAL</span><span lang=EN-US>*)MtlBuf-&gt;</span><span
lang=EN-US style='color:#880000'>GetBufferPointer</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>재질 복사<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;m_nMtl; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>memcpy</span><span lang=EN-US>(&amp;(m_pMtl[i]),
&amp;(pMtl[i].MatD3D), </span><span lang=EN-US style='color:blue'>sizeof</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>D3DMATERIAL9</span><span
lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>텍스처는 조금 주의해야 합니다<span
lang=EN-US>. X-file </span>내부에 저장된 이미지 경로와 실제 이미지의 위치가 다를 수 있습니다<span
lang=EN-US>. </span>가장 좋은 방법은 해당 <span lang=EN-US>X-file</span>에 텍스처를 같이 놓거나 아니면
<span lang=EN-US>X-file</span>이 있는 폴더의 특정이름이 있는 하위 폴더에 텍스처를 가지고 있으면 코딩의 일관성이 생깁니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>여기서는 같은 경로에 있다고 생각하고 다음과 같이<span
lang=EN-US> _splitpath() </span>함수와<span lang=EN-US> _makepath() </span>함수로 이미지
경로를 조정해서 텍스처가 생성될 수게 있게 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>char</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; sParentPath[</span><span
lang=EN-US style='color:#A000A0'>MAX_PATH</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>}; </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dir[</span><span
lang=EN-US style='color:#A000A0'>_MAX_DIR</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>_splitpath</span><span lang=EN-US>( sFile, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, dir, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>_makepath</span><span lang=EN-US>(sParentPath, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, dir, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>텍스처 생성<span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;m_nMtl; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US> sTexFile[</span><span
lang=EN-US style='color:#A000A0'>MAX_PATH</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US> fname[</span><span
lang=EN-US style='color:#A000A0'>_MAX_FNAME</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US> ext[</span><span
lang=EN-US style='color:#A000A0'>_MAX_EXT</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sTexSrc = pMtl[i].pTextureFilename;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US> == sTexSrc || </span><span
lang=EN-US style='color:#880000'>strlen</span><span lang=EN-US>(sTexSrc)&lt;</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>continue</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>_splitpath</span><span lang=EN-US>( sTexSrc, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, fname, ext);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>_makepath</span><span lang=EN-US>(sTexFile, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, sParentPath, fname,
ext);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>IDirect3DTexture9</span><span lang=EN-US>* pTx = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>D3DXCreateTextureFromFile</span><span
lang=EN-US>(m_pDev, sTexFile, &amp;pTx);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pTex[i]
= pTx;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_xfile01.zip">daux07_xfile01.zip</a></span>을
참고하고 <span lang=EN-US>CMcScene::Create() </span>함수의 주석을 바꾸어보면 다음과 같은<span
lang=EN-US> Dwarf</span>와 건물을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=273 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image034.gif">&nbsp;<img border=0 width=273 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image035.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;x-file: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_xfile01.zip">daux07_xfile01.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_xfile01.zip">daux07_xfile01.zip</a></span>의<span
lang=EN-US> Dwarf</span>를 실행하면 건물보다 상당히 작게 나옵니다<span lang=EN-US>. </span>월드 행렬을
바꾸어서 바꾸면 크게 출력할 수 있을 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이렇게<span lang=EN-US> X-file</span>의 클래스 작업은 끝이 나 보입니다<span
lang=EN-US>. </span>그런데 여기서 잠깐 생각해봐야 할 것이 있습니다<span lang=EN-US>. </span>만약 같은 모델의<span
lang=EN-US> Dwarf</span>를 여러 개 출력하게 된다면 매 번 파일에서 읽어와야 할까요<span lang=EN-US>?</span></p>

<p class=MsoNormal>매번 파일에서 불러와 생성하면 보조 기억 장치를 접근하는 것이므로 렌더링 속도의 저하는 불을 보듯 뻔합니다<span
lang=EN-US>. </span>그렇다면 하나의 모델을 가지고 복제해서 사용하는 방법을 생각할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>메쉬의 기하 정보를 복사하는 <span lang=EN-US>CloneMeshFVF() </span>함수를 통해서
정점과 인덱스 등을 복사 하고 텍스처는 변하는 일이 없으므로 원본에서 참조하도록 하면 될 것 같습니다<span lang=EN-US>. </span>그런데
이 방법도 더 생각해 봐야 합니다<span lang=EN-US>. </span>파티클과 같이 정점의 위치를 파이프라인에 올리기 전에 바꾸어야 하는
것은 기하 정보를 반드시 복사를 해야 하지만 렌더링 파이프라인의 월드 행렬만 바꾸어도 되는 오브젝트는 복사가 아닌 원본을 참조하는 방법으로 오브젝트를
구성해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span>이런 좋은 아이디어가 있어도 막상 코드로 표현 하는 것이
어려울 수도 있습니다<span lang=EN-US>. </span>이럴 때 무조건 이전의 코드를 다 바꾸지 말고 잘 구성되어 있다면 새로운 클래스를
추가해서 관계를 만들어 가는 것이 더 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그림처럼 <span lang=EN-US>IMcXFile</span>를 순수 가상함수들로 구성된 인터페이스를 하나를
만들고<span lang=EN-US> CMcXFile </span>클래스는 이를 상속합니다<span lang=EN-US>. </span>그리고
렌더링 오브젝트인<span lang=EN-US> CMcXFileIns </span>클래스는<span lang=EN-US> IMcXFile </span>클래스를
상속 받고<span lang=EN-US> CMcXFile </span>클래스를 포함합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>여기서 원칙을 하나 만들면<span lang=EN-US> CMcXFile</span>은 렌더링이 가능해도 그
역할을 하지 않고 오직<span lang=EN-US> CMcXFileIns </span>클래스만 장면을 렌더링 하게 하면<span
lang=EN-US> CMcXFile</span>의 인스턴스는 메모리 복제용으로만 사용하게 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=299 height=401
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image036.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;X-file </span>객체를 표현하기 위한 클래스 구조<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을 코드로 구현해 보면 먼저<span lang=EN-US> IMcXFile</span>의 인터페이스를 다음과
같이 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define interface</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>struct</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>interface</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>IMcXFile</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(…, </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sFileName=</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pOriginal=</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Destroy</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>FrameMove</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Render</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>IMcXFile</span><span lang=EN-US>* </span><span
lang=EN-US style='color:#880000'>GetOrigin</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetWorldMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>*)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>* </span><span
lang=EN-US style='color:#880000'>GetWorldMatrix</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Create(), Destroy(), FrameMove(), Render()</span>함수는
객체의 생성<span lang=EN-US>, </span>소멸<span lang=EN-US>, </span>데이터 갱신<span
lang=EN-US>, </span>렌더링에 대한 함수 입니다<span lang=EN-US>. GetOrigin() </span>함수는<span
lang=EN-US> X-file</span>의 내용을 갖고 있는<span lang=EN-US> CMcXFile</span>의 객체를 반환하는
함수 입니다<span lang=EN-US>. </span>각 렌더링 오브젝트는 월드 행렬이 있어야 하므로 월드 행렬을 설정하거나 가져올 수 있는
함수를 준비합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>객체의 생성은 다음과 같은 함수로 클래스의 인스턴스를 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>McXCreate_Xfile</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>IMcXFile</span><span lang=EN-US>** pOut, </span><span
lang=EN-US style='color:blue'>LPDIRECT3DDEVICE9</span><span lang=EN-US> pDev, </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sFile, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pOriginal)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>IMcXFile</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pObj=
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(sFile)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pObj
= </span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>CMcXFile</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pOriginal)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pObj
= </span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>CMcXFileIns</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US>{&nbsp;&nbsp; *pOut =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>FAILED</span><span lang=EN-US>(pObj-&gt;</span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(pDev, sFile, pOriginal)))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>delete</span><span lang=EN-US> pObj;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pOut
= pObj;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 함수는 해당 인스턴스를 어느 클래스에서 만들지 결정합니다<span lang=EN-US>. </span>만약
파일 이름이 주어지면<span lang=EN-US> CMcXFile </span>클래스의 객체를 만들고 파일 이름 대신<span
lang=EN-US> CMcXFile </span>객체에 대한<span lang=EN-US> Original </span>포인터가 주어지면 복제에
대한 요구로 받아 들여<span lang=EN-US> CMcXFileIns </span>클래스의 객체를 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>CMcXFile </span>클래스는 다음과 같이<span
lang=EN-US> IMcXFile </span>인터페이스를 상속 받고 복제에 필요한 정보를 전달 할 수 있도록 몇 개의 메소드를 추가했습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMcXFile</span><span lang=EN-US> : </span><span lang=EN-US
style='color:blue'>public</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>IMcXFile</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>public</span><span lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>ID3DXMesh</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetMesh</span><span lang=EN-US>()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pMsh; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DMATERIAL9</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetMaterial</span><span lang=EN-US>()&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pMtl; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetTexture</span><span lang=EN-US>()&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pTex; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetNumMaterial</span><span lang=EN-US>(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_nMtl; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링 역할을 하게 될<span lang=EN-US> CMcXFileIns</span>는 원본<span
lang=EN-US> CMcXFile </span>클래스의 객체와 장면 구성에 필요한 월드 행렬을 멤버로 구성합니다<span
lang=EN-US>. </span>또한 외부에서 월들 행렬을 설정하거나 가져올 수 있는 멤버 함수를 구현합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMcXFileIns</span><span lang=EN-US> : </span><span
lang=EN-US style='color:blue'>public</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>IMcXFile</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>CMcXFile</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pOrg;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Original X-file Instance</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_mtWld;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>public</span><span lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>IMcXFile</span><span lang=EN-US>* </span><span
lang=EN-US style='color:#880000'>GetOrigin</span><span lang=EN-US>()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pOrg;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetWorldMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>* v){&nbsp; m_mtWld
= *v;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>* </span><span
lang=EN-US style='color:#880000'>GetWorldMatrix</span><span lang=EN-US>()&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> &amp;m_mtWld;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>남은 것은<span lang=EN-US> CMcXFileIns </span>클래스에서 렌더링에 필요한 데이터
초기화 입니다<span lang=EN-US>. CMcXFileIns:: Create() </span>함수를 보면 다음과 같이 간단하게 처리하고
있음을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMcXFileIns</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>…</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pOriginal)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pOrg
= (</span><span lang=EN-US style='color:blue'>CMcXFile</span><span lang=EN-US>*)pOriginal;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pMsh
= m_pOrg-&gt;</span><span lang=EN-US style='color:#880000'>GetMesh</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pMtl&nbsp;
= m_pOrg-&gt;</span><span lang=EN-US style='color:#880000'>GetMaterial</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pTex&nbsp;
= m_pOrg-&gt;</span><span lang=EN-US style='color:#880000'>GetTexture</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_nMtl&nbsp;
= m_pOrg-&gt;</span><span lang=EN-US style='color:#880000'>GetNumMaterial</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>메쉬<span lang=EN-US>, </span>재질<span lang=EN-US>, </span>텍스처에
대한 주소를 가질 필요는 없지만 렌더링 함수에서 매번 원본에서 호출하는 부담을 덜기 위해서입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 클래스의<span lang=EN-US> Render()</span>함수는 다음과 같이 월드 행렬을 설정하고
원본의 메쉬<span lang=EN-US>, </span>재질 등의 주소를 저장한 포인터로 렌더링 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMcXFileIns</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>Render</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTransform</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DTS_WORLD</span><span lang=EN-US>, &amp;m_mtWld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;m_nMtl; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetMaterial</span><span lang=EN-US>( &amp;m_pMtl[i]
);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTexture</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_pTex[i] );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pMsh-&gt;</span><span
lang=EN-US style='color:#880000'>DrawSubset</span><span lang=EN-US>( i );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>mtI</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTransform</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DTS_WORLD</span><span lang=EN-US>, &amp;mtI);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>마지막으로 테스트가 남았습니다<span lang=EN-US>. <a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_xfile02.zip">daux07_xfile02.zip</a></span>의 <span lang=EN-US>CMcScene
</span>클래스 선언을 보면 다음과 같이 원본과 원본의 데이터를 참조하는<span lang=EN-US> 3</span>개의 렌더링 오브젝트
인스턴스를 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMcScene</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>IMcXFile</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pXOrg;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>IMcXFile</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pXClone1;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>IMcXFile</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pXClone2;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>IMcXFile</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pXClone3;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>3</span>개의 렌더링 오브젝트들은 <span lang=EN-US>CMcScene::Create()
</span>함수에서 다음과 같이 원본을 먼저 생성한 다음 이 인스턴스를 이용해서 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMcScene</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Create</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>LPDIRECT3DDEVICE9</span><span lang=EN-US> pDev)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= </span><span lang=EN-US style='color:#880000'>McXCreate_Xfile</span><span
lang=EN-US>(&amp;m_pXOrg, m_pDev, </span><span lang=EN-US style='color:fuchsia'>&quot;xfile/dwarf/dwarf.x&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= </span><span lang=EN-US style='color:#880000'>McXCreate_Xfile</span><span
lang=EN-US>(&amp;m_pXClone1, m_pDev, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, m_pXOrg);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= </span><span lang=EN-US style='color:#880000'>McXCreate_Xfile</span><span
lang=EN-US>(&amp;m_pXClone2, m_pDev, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, m_pXOrg);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= </span><span lang=EN-US style='color:#880000'>McXCreate_Xfile</span><span
lang=EN-US>(&amp;m_pXClone3, m_pDev, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, m_pXOrg);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>월드 행렬 갱신과 렌더링은 <span lang=EN-US
style='color:blue'>CMcScene</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>FrameMove</span><span lang=EN-US>() </span>함수와 <span
lang=EN-US style='color:blue'>CMcScene</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>Render</span><span lang=EN-US>() </span>함수에서 구현되어
있으니 참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_xfile02.zip">daux07_xfile02.zip</a></span>를
실행하면 다음과 같이<span lang=EN-US> Dwarf 3</span>개가 있는 화면을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image037.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;X-file </span>클래스에 대한 추상화<span
lang=EN-US>: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux07_xfile02.zip">daux07_xfile02.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3.8 X-file
Animation</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.8.1 Skinning
Animation </span><span style='font-size:14.0pt'>기초</span></p>

<p class=MsoNormal>정적인 모델의 <span lang=EN-US>DXSDK</span>의<span lang=EN-US>
Sample </span>폴더에 <span lang=EN-US>SkinnedMesh </span>예제가 있습니다<span lang=EN-US>.
</span>이 예제는 애니메이션 정보가 포함되어 있는<span lang=EN-US> X-file</span>을 화면에 출력해 줍니다<span
lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image038.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;DXSDK Skinning </span>예제<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>게임에서 애니메이션이라는 것은 간단하게 시간에 대한 정점의 이동이라
할 수 있겠습니다<span lang=EN-US>. </span>이 정점을 이동 시키는 방법은 시간에 대해서 오브젝트의 모든 위치를 저장한 데이터에서
가져오는 방법이 있습니다<span lang=EN-US>. </span>이 방법은 가장 빠르고 정확한 애니메이션을 만들어 내지만 문제는 정점의 숫자와
애니메이션의 시간에 곱에 메모리를 엄청나게 필요로 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이의 개선 책으로 많이 선택하는 것이 자료 구조 중 나무 구조<span lang=EN-US>(tree
structure)</span>처럼 오브젝트를 구성하고 있는 개별적인<span lang=EN-US> Geometry</span>를 부모와 자식간의
관계로 설정하고<span lang=EN-US>, </span>시간에 대한 변화를 각<span lang=EN-US> Geometry</span>의
행렬로 저장해서 해당 시간에 부모의 행렬을 자신의 지역 행렬에 곱해 애니메이션을 하는 방법이 있습니다<span lang=EN-US>. </span>이
방법을 사용하면 시간이 늘어나도 애니메이션 정보의 행렬 만 커질 뿐 정점의 개수와는 무관하게 되어 효율적인 프로그램이 되고 현재 대부분의 게임은
이 방법을 채용하고 있습니다</p>

<p class=MsoNormal><span lang=EN-US>3D</span>에서 하나의 행렬을 하나의 오브젝트에 가하면 오브젝트를 구성하는
정점 사이의 관계 특히<span lang=EN-US>, </span>거리의 비율은 이전과 변함이 없습니다<span lang=EN-US>. </span>이렇게
이전의 특성이 유지되는 애니메이션을 딱딱한 애니메이션<span lang=EN-US>(Rigid body: </span>강체<span
lang=EN-US>)</span>라 부르는 강체 애니메이션입니다<span lang=EN-US>. </span>강체라는 것은 순전히 물리학에서
온 용어로 어떤 외부의 힘을 가해도 그 성질이 변하지 않는 실 세계는 존재하지 않는 가상의 물체입니다<span lang=EN-US>. </span>강체
애니메이션을 화면에 표현하면 동작이 로봇처럼 딱딱합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Mechatronics</span>를 배경으로 게임을 만든다면 강체 애니메이션
만으로도 충분합니다<span lang=EN-US>. </span>그런데 이 강체 애니메이션을 사람이나 동물을 주요 소재로 하는 게임에 적용하면
팔과 같은 관절 부위에서 피부가 다른 피부를 파고 들거나 벌어지는 현상이 만들어져 자연스러움이 많이 감소됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>특히 격투 게임처럼 캐릭터가 화면 가득 채우는 상황이라면 강체 애니메이션은 조금 부족합니다<span
lang=EN-US>. </span>과거에는 이런 문제를 팔이나 다리에 보호대 또는 갑옷을 덧씌워서 해결을 했으며 지금도 많이 사용하는 멋진 방법입니다<span
lang=EN-US>. </span>최근에는<span lang=EN-US> Skinning </span>이라는 방식이 도입되어 관절 부위의 부
자연스러운 모습을 없앴습니다<span lang=EN-US>. </span>이로 인해 게임 캐릭터의 육감적이고 야성적인 모습을 나타내기 위해 걸치는
옷감의 양이 많이 줄었습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=611 height=251
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image039.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>강체 애니메이션과<span lang=EN-US> Skinning
</span>애니메이션<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Skinning </span>애니메이션 구현은 의외로 간단합니다<span
lang=EN-US>. </span>정점을 구성하는<span lang=EN-US> Geometry </span>중에서 관절 부위에 해당하는 점들은
해당<span lang=EN-US> Geometry</span>의 행렬뿐만 아니라 인접한<span lang=EN-US> Geometry</span>의
행렬도 같이 적용하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>그림에서 강체 애니메이션의 정점 <span lang=EN-US>p</span>는<span
lang=EN-US> Geometry A</span>의 행렬에만 영향을 받지만<span lang=EN-US> Skinning </span>애니메이션의
정점<span lang=EN-US> p</span>는<span lang=EN-US> Geometry B</span>의 행렬에도 영향을 받습니다<span
lang=EN-US>. </span>정점에 영향을 주는 정도를 비중<span lang=EN-US>(Weight)</span>로 설정해서 수식으로
표현 하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>정점<span lang=EN-US> p</span>의 변환<span lang=EN-US> = (p *
Geometry A </span>행렬<span lang=EN-US>) * Geometry A</span>의 비중</i></p>

<p class=MsoNormal style='text-indent:70.0pt'><i><span lang=EN-US>&nbsp;+ (p *
Geometry B </span>행렬<span lang=EN-US>) * Geometry B</span>의 비중</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>단순하게<span lang=EN-US> 2</span>개의 행렬 만 관절부위의 정점에 적용하면 벌어지거나 겹치는
문제는 해결이 되지만 부드러운 곡면을 만들기가 어렵습니다<span lang=EN-US>. </span>이를 위해 여러 개의 행렬을 적정에 적용을
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>정점<span lang=EN-US> p</span>의 변환<span lang=EN-US> = (p *
Geometry A </span>행렬<span lang=EN-US>) * Geometry A</span>의 비중</i></p>

<p class=MsoNormal style='text-indent:70.0pt'><i><span lang=EN-US>&nbsp;+ (p *
Geometry B </span>행렬<span lang=EN-US>) * Geometry B</span>의 비중<span lang=EN-US>
+ … </span></i></p>

<p class=MsoNormal style='text-indent:70.0pt'><i><span lang=EN-US>+ (p *
Geometry M </span>행렬<span lang=EN-US>) * Geometry M</span>의 비중</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>수학 기호를 사용해서 표현하면 영향을 주는 행렬을 <span lang=EN-US><sub><img
border=0 width=23 height=25 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image040.gif"></sub>, </span>비중을
<span lang=EN-US><sub><img border=0 width=23 height=23
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image041.gif"></sub></span>라 하면 변환 후의 정점 위치 <span
lang=EN-US><sub><img border=0 width=16 height=21
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image042.gif"></sub></span>는 다음과 같이 표현 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=129 height=37
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image043.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>괄호 안의 점 <span lang=EN-US><sub><img border=0 width=13
height=21 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image044.gif"></sub></span>은 Σ밖으로 빼내올 수 있으므로 수식을
정리하면</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=136 height=85
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image045.gif"></sub>&nbsp;,&nbsp; <sub><img border=0
width=209 height=48 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image046.gif"></sub>,&nbsp; <sub><img
border=0 width=63 height=36 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image047.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 됩니다<span lang=EN-US>. </span>우측의 식은 이전의 식처럼 각 행렬마다 정점을 변환 시키는
것이 아니라 각 행렬에 대해서 <span lang=EN-US><sub><img border=0 width=53 height=25
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image048.gif"></sub>&nbsp;</span>계산을 먼저하고 이들을 더한 전부 더한 다음에
정점의 변환을 수행하기 때문에 처리 속도에 이득입니다<span lang=EN-US>. </span>그리고 모든 비중의 합을<span
lang=EN-US> 1</span>로 유지합니다<span lang=EN-US>. </span>만약<span lang=EN-US> 1</span>보다
크거나 작으면 정점의 위치에 크기 변환이 적용된 것과 같은 상황을 만듭니다<span lang=EN-US>. </span>정점에 하나의 비중만 있고
값이<span lang=EN-US> 1</span>이라면 이 애니메이션은 강체 애니메이션과 같습니다<span lang=EN-US>. </span>따라서
강체 애니메이션은<span lang=EN-US> Skinning </span>애니메이션의 부분 집합이라 할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>이렇게 간단한 수식 조차도 하드웨어에서 지원되기 시작한 것은 최근의 일입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고정 기능 파이프라인에서<span lang=EN-US> D3D</span>는 하나의 정점에 최대<span
lang=EN-US> 4</span>개까지 영향을 주는 행렬을 설정 할 수 있고 최대<span lang=EN-US> 255</span>개까지 영향을
주는 행렬들을 만들 수 있습니다<span lang=EN-US>. (</span>쉐이더를 사용하면 이 제한은 거의 없습니다<span
lang=EN-US>.) </span>하지만 하드웨어는<span lang=EN-US> D3D </span>뜻대로 정점에<span
lang=EN-US> 4</span>개의 행렬을 연결할 수 있지만 영향을 줄 수 있는 행렬들의 총 수가<span lang=EN-US> 255</span>개가
안될 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그래서 먼저 프로그램을 적용하기 전에 하드웨어에서 지원되는 행렬의 최대 숫자를 다음과 같이 확인 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DCAPS9</span><span lang=EN-US> d3dCaps;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>GetDeviceCaps</span><span lang=EN-US>(
&amp;d3dCaps );</span></p>

<p class=MsoNormal><span lang=EN-US>m_nMaxMatrixSize =
d3dCaps.MaxVertexBlendMatrixIndex;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>간단한<span lang=EN-US> Skinning </span>예제로<span lang=EN-US>
&quot;</span>태극기 휘날리며<span lang=EN-US>&quot; </span>를 만들어 봅시다<span lang=EN-US>.
</span>먼저 다음과 같이 화면에 태극기를 하나 출력합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=272 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image049.gif">&nbsp;<img border=0 width=273 height=204
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image050.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>태극기 정점<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>태극기가 바람에 제대로 펄럭이도록 정점 버퍼를 그림의 왼쪽처럼 삼각형을<span lang=EN-US> 40</span>개
정도 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>우리의 목표는 왼쪽에 표시된 삼각형을 움직이는 것으로 정점 마다 행렬을 각각 따로 설정할 것입니다<span
lang=EN-US>. </span>오른쪽 화면과 같은 정점을 출력하기 위해서 가지는 구조체는 다음과 같을 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxUV1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; u,
v;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZ</span><span lang=EN-US> |</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_TEX1</span><span lang=EN-US>),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal>이 구조체를 개량해서 행렬의 인덱스와 비중을 설정합니다<span lang=EN-US>. </span>예를 들어
정점 하나에 영향을 주는 행렬을 두 개로 설정한다면 정점 구조체는 다음과 같이 만들어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxUV1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT&nbsp;&nbsp; </span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>비중<span
lang=EN-US>(Weight)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>BYTE&nbsp;&nbsp;&nbsp; </span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>]; &nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>행렬의 인덱스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZB2 | D3DFVF_LASTBETA_UBYTE4 | …</span><span
lang=EN-US>),&nbsp; };</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>구조체를 보면 비중은<span lang=EN-US> float</span>형<span lang=EN-US>
1</span>개로 설정되어 있습니다<span lang=EN-US>. </span>이것은 하나를 설정하면 나머지 하나는 파이프라인에서<span
lang=EN-US> 1.0f - g </span>값으로 자동 계산 됩니다<span lang=EN-US>. </span>행렬의 인덱스는 <span
lang=EN-US>m </span>변수에 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>FVF</span>에서<span lang=EN-US> XYZ </span>뒤에<span
lang=EN-US> B2</span>가 붙었습니다<span lang=EN-US>. </span>이것은<span lang=EN-US>
Blending </span>인덱스의 개수가 <span lang=EN-US>2</span>를 의미하며 행렬의 인덱스<span
lang=EN-US> 4</span>바이트 <span lang=EN-US>m</span>를 하위 바이트부터 <span lang=EN-US>index0,
index 1 </span>두 개의 인덱스 사용을 뜻합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>D3DFVF_LASTBETA_UBYTE4</span>는 앞의 구조체처럼 비중과
인덱스를 동시에 가지고 있을 때 마지막 값을 <span lang=EN-US>unsigned byte 4</span>개를 인덱스로 사용함을 의미합니다<span
lang=EN-US>. </span>거의 이 포맷을 사용하기 때문에 버텍스에 행렬을 여러 개 설정할 때는 이 플래그는 고정이라 생각하는 것이 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>이렇게 정점에 행렬의 인덱스를 적용해서<span lang=EN-US> Skinning</span>을 구현하기
때문에<span lang=EN-US> (Matrix) Indexed </span>방식 또는<span lang=EN-US> Matrix
Palette </span>방식의 정점 블렌딩<span lang=EN-US>(Blending) </span>이라 부릅니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>아직 익숙하지 않으니 비슷한 예를 하나 더 만들어봅시다<span lang=EN-US>. </span>정점에 영향을
주는 행렬이<span lang=EN-US> 3</span>개인 정점 구조체와<span lang=EN-US> FVF</span>는 구성할까요<span
lang=EN-US>?</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxUV1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; g;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>비중<span
lang=EN-US>(Weight)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD&nbsp;&nbsp; </span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m;
&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>행렬의 인덱스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZB3 | D3DFVF_LASTBETA_UBYTE4 | …</span><span
lang=EN-US>),&nbsp; };</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다시 태극기 문제로 돌아가서 행렬을<span lang=EN-US> 4</span>개 설정을 할 수 있고<span
lang=EN-US>, </span>텍스처의 좌표가 적용되는 구조체는 다음과 같을 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxBlend</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 변환된 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// blend weight</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Index</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; u,
v;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// UV</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZB4</span><span lang=EN-US> | </span><span
lang=EN-US style='color:#A000A0'>D3DFVF_LASTBETA_UBYTE4</span><span lang=EN-US>
| </span><span lang=EN-US style='color:#A000A0'>D3DFVF_TEX1</span><span
lang=EN-US>), };</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 구조체를 받아들이는 파이프라인은 행렬을 다음과 같이 계산을 한 다음 정점의 위치를 변환합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=331 height=56
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image051.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 태극기의 정점에 영향을 주는 행렬 배열의 크기를 <span lang=EN-US>D3D</span>가
지원하는 최대 값으로 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>D3DXMATRIX</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_mtWld[</span><span lang=EN-US
style='color:red'>256</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 정점 데이터를 만들 때 비중과 행렬 인덱스를 연결합니다<span lang=EN-US>. </span>지금은
정점에 순차적으로 행렬을 적용하고 있지만 이런 방법은 특별한 경우입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(…)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pVtx[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>*i + </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>].g[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>비중</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pVtx[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>*i + </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>].m[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>행렬 인덱스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pVtx[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>*i + </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>].g[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>비중</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pVtx[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>*i + </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>].m[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>행렬 인데스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>매 프레임 마다 행렬을 갱신합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; fAngle = </span><span
lang=EN-US style='color:#880000'>GetTickCount</span><span lang=EN-US>() * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>4f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span lang=EN-US
style='color:red'>256</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> fTheta = fAngle + i
* (</span><span lang=EN-US style='color:red'>360.f</span><span lang=EN-US>/</span><span
lang=EN-US style='color:red'>15</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtWld[i]._41
= </span><span lang=EN-US style='color:#880000'>cosf</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DXToRadian</span><span lang=EN-US>(fTheta) )
* </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtWld[i]._42
= </span><span lang=EN-US style='color:#880000'>sinf</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DXToRadian</span><span lang=EN-US>(fTheta) )
* </span><span lang=EN-US style='color:red'>4</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링만 남았습니다<span lang=EN-US>. </span>먼저 프로그램 시작할 때 하드웨어에서 지원되는
행렬의 최대 숫자를 가지고 지금의 행렬의 개수가 이보다 클 경우에는 다음과 같이 소프트웨어 버텍스 프로세싱을 호출합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(m_nMaxMatrixSize&lt;</span><span
lang=EN-US style='color:red'>128</span><span lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetSoftwareVertexProcessing</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>TRUE</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>SetSoftwareVertexProcessing() </span>함수는<span
lang=EN-US> MIXED_VERTEX_PROCESSING</span>에만 적용이 됩니다<span lang=EN-US>. </span>따라서<span
lang=EN-US> MIXED</span>로 디바이스를 생성하거나 아니면<span lang=EN-US>
SOFTWARE_VERTEX_PROCESSING</span>으로 디바이스를 만들어야 합니다<span lang=EN-US>. </span>다음에
보여줄 예제는<span lang=EN-US> MIXED</span>로 디바이스를 만들었습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음으로 인덱스에 의한 버텍스 블렌딩을 활성화합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_INDEXEDVERTEXBLENDENABLE</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>TRUE</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>또한 버텍스 블렌딩의 비중에 대한 최대 인덱스를 지정합니다<span
lang=EN-US>. </span>구조체에서 행렬에 대해서<span lang=EN-US> 4</span>개의 인덱스를 지정하고 있으므로<span
lang=EN-US> 0,1,2,3</span>에서<span lang=EN-US> 3</span>의 값을 선택해 다음과 같이 디바이스에 적용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_VERTEXBLEND</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DVBF_3WEIGHTS</span><span lang=EN-US> );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>행렬 배열을 디바이스에 설정하고 오브젝트를 렌더링 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span lang=EN-US
style='color:red'>256</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTransform</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DTS_WORLDMATRIX</span><span lang=EN-US>(i),
&amp;m_mtWld[i] );</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>DrawPrimitiveUP</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DPT_TRIANGLESTRIP</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>40</span><span lang=EN-US>, m_pVtx, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VtxBlend</span><span lang=EN-US>));</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>디바이스를 원상태로 되돌려 놓습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DRS_INDEXEDVERTEXBLENDENABLE</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>FALSE</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DRS_VERTEXBLEND</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DVBF_DISABLE</span><span lang=EN-US>&nbsp;
);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetSoftwareVertexProcessing</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>FALSE</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>디바이스의 행렬 초기화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>static</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>D3DXMATRIX</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>mtIdentity</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span lang=EN-US
style='color:red'>256</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTransform</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DTS_WORLDMATRIX</span><span lang=EN-US>(i),
&amp;mtIdentity);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux08_skinning01.zip">daux08_skinning01.zip</a></span>을
참고하십시오<span lang=EN-US>. </span>이를 실행하면 다음과 같은 화면을 얻을 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=301 height=227
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image052.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Skinning </span>태극기 예제<span lang=EN-US>:
<a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux08_skinning01.zip">daux08_skinning01.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.8.2 Modified SkinnedMesh</span><span
lang=EN-US> </span></p>

<p class=MsoNormal><span lang=EN-US>DXSDK Sample</span>의<span lang=EN-US>
SkinnedMesh</span>는<span lang=EN-US> X-file</span>의 정보를 받아서<span lang=EN-US>
Skinning</span>으로 애니메이션을 구현한 예제입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>예제는 파일에서 애니메이션 정보를 만드는 <span lang=EN-US>CAllocateHierarchy </span>클래스<span
lang=EN-US>, </span>장면의 렌더링에 필요한 메쉬<span lang=EN-US>, </span>텍스처<span
lang=EN-US>, </span>재질<span lang=EN-US>, </span>행렬 등을 가진 <span lang=EN-US>D3DXMESHCONTAINER
</span>클래스<span lang=EN-US>, </span>메쉬 컨테이너들을 모아서 하나의 나무 구조<span lang=EN-US>(Tree
Structure)</span>를 만드는 <span lang=EN-US>D3DXFRAME </span>세 부분으로 구성되어 있고<span
lang=EN-US>, Skinning</span>에 대한 애니메이션을<span lang=EN-US> Non-Index, Indexed, </span>정점
쉐이더<span lang=EN-US>(Vertex Shader), </span>고 수준 쉐이더<span lang=EN-US>(HLSL) </span>총<span
lang=EN-US> 4</span>개의 방식 중에서 하나를 선택해서 적용해 볼 수 있습니다<span lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='position:absolute;z-index:1;left:0px;
margin-left:396px;margin-top:168px;width:192px;height:151px'><img width=192
height=151 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image053.gif"></span><span lang=EN-US>&nbsp;<img
border=0 width=419 height=497 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image054.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;SkinnedMesh </span>예제의 수정된 자료 구조<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Non-Index</span>는 기본적으로 <span lang=EN-US>Indexed
</span>방식으로 애니메이션을 구현하지만 정점에 설정된 행렬의 인덱스가 하드웨어에서 지원되는 최대 크기를 넘어서는 경우에 소프트웨어<span
lang=EN-US>(CPU)</span>로 정점의 처리하도록 코드가 구성되어 있습니다<span lang=EN-US>. </span>앞서 태극기
예제에서 이런 방법을 위해서 디바이스의 <span lang=EN-US>SetSoftware-VertexProcessing() </span>함수를
호출한 적이 있습니다<span lang=EN-US>. </span>이것이 지원되려면<span lang=EN-US> MIXED</span>로 디바이스를
생성해야 한다고 했고<span lang=EN-US>, </span>이 때문에<span lang=EN-US> SkinnedMesh </span>예제도<span
lang=EN-US> MIXED</span>로 디바이스를 만들었음을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 예제를 그대로 사용하기는 무척 어렵습니다<span lang=EN-US>. </span>그래서 코드를 게임에
적용할 수 있도록 재배치 해야 합니다<span lang=EN-US>. <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux08_skinning02.zip">daux08_skinning02.zip</a></span>는
이 예제를 게임 프로그램에 적용할 수 있도록 수정한 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>코드를 재배치 하면서<span lang=EN-US> Shader </span>부분은 과감히 생략하고<span
lang=EN-US>, Indexed </span>방식도<span lang=EN-US> Non-Index</span>에 포함되어 있으므로 이 부분도
제거했습니다<span lang=EN-US>. </span>이전의<span lang=EN-US> X-file</span>을 클래스로 만들 때처럼
구조는 거의 그대로 두고<span lang=EN-US>(</span>변수 이름과 함수 이름은 일부 바꾸었습니다<span lang=EN-US>.)
</span>몇 개의 인터페이스와 클래스를 추가하여 앞의 그림과 같은 구조로 변경해서 만든 예가 <span lang=EN-US><a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux08_skinning02.zip">daux08_skinning02.zip</a></span>입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ILcMdl</span>은<span lang=EN-US> X-file</span>의<span
lang=EN-US> Skinning</span>에 대한 최상위 클래스로 인터페이스 역할을 합니다<span lang=EN-US>. </span>이를
상속받은 <span lang=EN-US>CLcXSkin </span>클래스는 애니메이션에 필요한 시간과 객체에 대한 월드 행렬의 멤버 변수를 가지고
있고 이들을 설정하거나 참조할 수 있는 멤버 함수를 다음과 같이 가지고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcXSkin</span><span lang=EN-US> : </span><span lang=EN-US
style='color:blue'>public</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>ILcMdl</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_mtWorld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>객체의 월드 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_dTimeCur&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>객체의 시간</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetAttrib</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sCmd, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pVal);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetAttrib</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sCmd, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pVal);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetPosition</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>* float3);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetPosition</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>* float3);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>속성이 많아 지면 이에 대한 함수도 증가할 수 있어 코드가 엉망이 되기 쉽습니다<span
lang=EN-US>. </span>간단한 데이터에 대한 설정과 참조는 하나의 함수에서 다음과 같이 처리하는 것이 전체 구조를 잘 가지고 갈 수
있는 비결입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcXSkin</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>SetAttrib</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sCmd, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pVal)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> ==</span><span
lang=EN-US style='color:#880000'>_stricmp</span><span lang=EN-US>(sCmd, </span><span
lang=EN-US style='color:fuchsia'>&quot;World Matrix&quot;</span><span
lang=EN-US>))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtWorld
=*((</span><span lang=EN-US style='color:blue'>D3DXMATRIX</span><span
lang=EN-US>*)pVal);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> ==</span><span
lang=EN-US style='color:#880000'>_stricmp</span><span lang=EN-US>(sCmd, </span><span
lang=EN-US style='color:fuchsia'>&quot;Elapsed Time&quot;</span><span
lang=EN-US>))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> fTime =*((</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>*)pVal);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_dTimeCur
+= fTime;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcXSkin</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>GetAttrib</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sCmd, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pVal)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> ==</span><span
lang=EN-US style='color:#880000'>_stricmp</span><span lang=EN-US>(sCmd, </span><span
lang=EN-US style='color:fuchsia'>&quot;World Matrix&quot;</span><span
lang=EN-US>))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *((</span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>*)pVal) =
m_mtWorld;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> ==</span><span
lang=EN-US style='color:#880000'>_stricmp</span><span lang=EN-US>(sCmd, </span><span
lang=EN-US style='color:fuchsia'>&quot;Current Time&quot;</span><span
lang=EN-US>))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *((</span><span
lang=EN-US style='color:blue'>DOUBLE</span><span lang=EN-US>*)pVal) =
m_dTimeCur;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>내부에서<span lang=EN-US> if ~ else</span>의 증가는 어쩔 수 없지만 밖에서 보는 클래스의
외형적 구조는 간결합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>메쉬<span lang=EN-US>, </span>애니메이션 정보<span lang=EN-US>, </span>나무
구조<span lang=EN-US>(Tree Structure)</span>를 구성하는 <span lang=EN-US>CLcXSkinSrc </span>클래스는
다음과 같이 애니메이션 제어에 대한 객체와 행렬의 배열을 가지고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcXSkinSrc</span><span lang=EN-US> : </span><span
lang=EN-US style='color:blue'>public</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>CLcXSkin</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SFrame</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pFrameRoot&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Root</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPD3DXANIMATIONCONTROLLER</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_pAC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Animation Controller</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_NumBoneMatricesMax;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>행렬 인덱스의 수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pBoneMatrices&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>행렬의 배열</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>void&nbsp;&nbsp;&nbsp; </span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>UpdateFrameMatrices</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>void&nbsp;&nbsp;&nbsp; </span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>DrawFrame</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>void&nbsp;&nbsp;&nbsp; </span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>RenderNonIndexed</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>CLcXSkinSrc::Create() </span>함수는 <span
lang=EN-US>D3DXLoadMeshHierarchyFromX() </span>함수를 이용해서 메쉬와 계층 구조<span
lang=EN-US>(hierarchy)</span>를 가져옵니다<span lang=EN-US>. </span>이 함수는 사용자가 <span
lang=EN-US>ID3DXAllocateHierarchy </span>상속 받는 클래스를 정의한 자료를 인수로 받습니다<span
lang=EN-US>. </span>사용자는 다음의 세 함수에 대해서 반드시 구현해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcXSkinAlloc</span><span lang=EN-US>: </span><span
lang=EN-US style='color:blue'>public</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ID3DXAllocateHierarchy</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>public</span><span lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>HRESULT</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>CreateFrame</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>HRESULT</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>CreateMeshContainer</span><span lang=EN-US>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>HRESULT</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>DestroyFrame</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>HRESULT</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>DestroyMeshContainer</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이들 함수는 <span lang=EN-US>D3DXLoadMeshHierarchyFromX() </span>함수에서
호출되며 다음과 같은 역할을 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>CreateFrame(): Frame</span>을 메모리에 생성할 때 호출합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>CreateMeshContainer(): </span>메쉬 컨테이너를 메모리에
생성할 때 호출합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>DestroyFrame(): </span>생성한<span lang=EN-US>
Frame</span>을 해제할 때 호출합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>DestoryMeshContainer(): </span>생성한 메쉬 컨테이너를
해제할 때 호출합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>코드를 옮기면서<span lang=EN-US> Mesh Container </span>구조를 상속에서 독립된
클래스로 바꾸었습니다<span lang=EN-US>. </span>이<span lang=EN-US> Mesh Container</span>는<span
lang=EN-US>&nbsp; </span>장면을 만드는 객체로 메쉬<span lang=EN-US>, </span>변환에 필요한 행렬의 포인터<span
lang=EN-US>, </span>재질<span lang=EN-US>(Material), Texture </span>등을 포함하고 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SMeshContainer</span><span lang=EN-US> </span><span
lang=EN-US style='color:green'>//: D3DXMESHCONTAINER</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMESHDATA</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
MeshData;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPD3DXMATERIAL</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pMaterials;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
NumMaterials;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp; ppTextures;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// array of textures</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Skin Mesh
info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;NumAttributeGroups; </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
NumInfl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>컨테이너에 영향을 주는
행렬의 수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPD3DXBUFFER</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pBoneCombinationBuf;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
m_pBoneMatrix;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Frame </span>객체는 계층적인 나무<span lang=EN-US>(Tree)
</span>구조를 형성하는 객체로 노드<span lang=EN-US>(Node)</span>의 포인터들과 함께 장면과 애니메이션을 구성하기 위한
변환 행렬<span lang=EN-US>, </span>메쉬 포인터 등을 포함 한 객체입니다<span lang=EN-US>. Root </span>노드부터
너비 우선 탐색<span lang=EN-US>(breadth-first search: BFS)</span>으로 행렬을 갱신하고<span
lang=EN-US>, Mesh Container </span>포인터를 이용해서 렌더링을 수행 합니다<span lang=EN-US>. </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SFrame</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:green'>//: public D3DXFRAME</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmMatrix;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>지역 좌표계의 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SMeshContainer</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pmcMesh;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링에 대한 메쉬 컨테이너</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SFrame</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pFrameSibling; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>이웃 형제 노드</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SFrame</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pFrameFirstChild;</span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>첫 번째 자식 노드</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmWorld;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 행렬<span
lang=EN-US> = tmMatrix * </span>부모 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SFrame</span><span lang=EN-US> *</span><span
lang=EN-US style='color:#880000'>FindFrame</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US> *szFrame);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>CLcXSkinSrc::UpdateFrameMatrices() </span>함수를
보면<span lang=EN-US> Frame </span>객체의 월드 행렬을 자신의 지역 행렬과 부모의 월드 행렬 곱으로 만들고 있고 형제 노드와
자식 노드에 대해서<span lang=EN-US> BFS</span>로 노드를 찾아가 데이터를 갱신하고 있음을 볼 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='margin-left:5.0pt;text-indent:-5.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US> (pParentMatrix != </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXMatrixMultiply</span><span lang=EN-US>(&amp;pFrame-&gt;tmWorld,
&amp;pFrame-&gt;tmMatrix, pParentMatrix);</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pFrame-&gt;tmWorld
= pFrame-&gt;tmMatrix;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>
(pFrame-&gt;pFrameSibling != </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>UpdateFrameMatrices</span><span lang=EN-US>(pFrame-&gt;pFrameSibling,
pParentMatrix);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>
(pFrame-&gt;pFrameFirstChild != </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>UpdateFrameMatrices</span><span lang=EN-US>(pFrame-&gt;pFrameFirstChild,
&amp;pFrame-&gt;tmWorld);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링도 <span lang=EN-US>CLcXSkinSrc::DrawFrame()</span>함수를 보면<span
lang=EN-US> BFS</span>로 진행하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US>pMeshContainer = pFrame-&gt;pmcMesh;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>while</span><span lang=EN-US> (pMeshContainer != </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>DrawMeshContainer</span><span lang=EN-US>(pMeshContainer,
pFrame);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pMeshContainer
= pMeshContainer-&gt;pNextMeshContainer;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>
(pFrame-&gt;pFrameSibling != </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>DrawFrame</span><span lang=EN-US>(pFrame-&gt;pFrameSibling);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>
(pFrame-&gt;pFrameFirstChild != </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>DrawFrame</span><span lang=EN-US>(pFrame-&gt;pFrameFirstChild);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>프로그램에서 렌더링과 애니메이션 정보를 가지고 있는<span lang=EN-US> CDXSkinSrc </span>클래스의
인스턴스를 참조해서 장면을 구성하는<span lang=EN-US> CDXSkinInst </span>클래스는 다음과 같은 간단한 구조로 구성이
됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcXSkinIns</span><span lang=EN-US> : </span><span
lang=EN-US style='color:blue'>public</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>CLcXSkin</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>CLcXSkinSrc</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pOrg;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Original Pointer</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPD3DXANIMATIONCONTROLLER</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_pAC;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Animation Controller</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SFrame</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pFrameRoot;&nbsp; </span><span
lang=EN-US style='color:green'>// Root Frame</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* =</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* =</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* =</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* =</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Destroy</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>FrameMove</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Render</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Root Frame</span>은 매번<span lang=EN-US>
Original</span>에서 가져오는 번거로움을 없애기 위해 만든 변수 입니다<span lang=EN-US>. INT
CLcXSkinIns::Create() </span>함수를 보면<span lang=EN-US> Animation Controller</span>를
복제하고 사용의 편리를 위해<span lang=EN-US> Original</span>로부터 필요한 정보를 얻습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcXSkinIns</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(…)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pOrg
= (</span><span lang=EN-US style='color:blue'>CLcXSkinSrc</span><span
lang=EN-US>*)p3;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pFrameRoot
= (</span><span lang=EN-US style='color:blue'>SFrame</span><span lang=EN-US>*)m_pOrg-&gt;</span><span
lang=EN-US style='color:#880000'>GetRootFrame</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPD3DXANIMATIONCONTROLLER</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; pAC
=</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>LPD3DXANIMATIONCONTROLLER</span><span
lang=EN-US>)m_pOrg-&gt;</span><span lang=EN-US style='color:#880000'>GetAnimationController</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>
MaxNumAnimationOutputs&nbsp;&nbsp; = pAC-&gt;</span><span lang=EN-US
style='color:#880000'>GetMaxNumAnimationOutputs</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US> MaxNumAnimationSets&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
pAC-&gt;</span><span lang=EN-US style='color:#880000'>GetMaxNumAnimationSets</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US> MaxNumTracks&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
pAC-&gt;</span><span lang=EN-US style='color:#880000'>GetMaxNumTracks</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US> MaxNumEvents&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
pAC-&gt;</span><span lang=EN-US style='color:#880000'>GetMaxNumEvents</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pAC-&gt;</span><span
lang=EN-US style='color:#880000'>CloneAnimationController</span><span
lang=EN-US>( MaxNumAnimationOutputs</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
MaxNumAnimationSets</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
MaxNumTracks</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
MaxNumEvents</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;m_pAC);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링은<span lang=EN-US> Animation Coltroller</span>의 <span
lang=EN-US>AdvanceTime () </span>함수에 전체 장면을<span lang=EN-US> 1 </span>프레임 렌더링 하는데
소모된 시간을 인수로 전달하면서 시작합니다<span lang=EN-US>. </span>만약 한 장면에 들었던 시간 대신 총 시간을 사용한다면
다음과 같이<span lang=EN-US> Track</span>의 위치를<span lang=EN-US> 0</span>으로 설정해야 합니다<span
lang=EN-US>. </span>다음으로 <span lang=EN-US>Original</span>의<span lang=EN-US>
UpdateFrame-Matrices() </span>함수와<span lang=EN-US> DrawFrame() </span>함수를 순차적으로
호출해서 장면을 그립니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcXSkinIns</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>Render</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US>m_pAC-&gt;</span><span lang=EN-US style='color:#880000'>SetTrackPosition</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>,
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US>m_pAC-&gt;</span><span lang=EN-US style='color:#880000'>AdvanceTime</span><span
lang=EN-US>(m_dTimeCur, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US>m_pOrg-&gt;</span><span lang=EN-US style='color:#880000'>UpdateFrameMatrices</span><span
lang=EN-US>(m_pFrameRoot, &amp;m_mtWorld);</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US>m_pOrg-&gt;</span><span lang=EN-US style='color:#880000'>DrawFrame</span><span
lang=EN-US>(m_pFrameRoot);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>CMain </span>클래스에는 <span lang=EN-US>ILcMdl</span>에
대한<span lang=EN-US> Original </span>객체<span lang=EN-US> 1</span>개와 이를 참조해서 만들<span
lang=EN-US> 3</span>개의 <span lang=EN-US>ILcMdl </span>객체를 선언하고 <span
lang=EN-US>CMain::Init() </span>함수에서 있습니다<span lang=EN-US>. LcMdl_Create()</span>함수에
파일 이름으로<span lang=EN-US> Original</span>을 만들고<span lang=EN-US> Original</span>을
인수로 전달해서 나머지<span lang=EN-US> 3</span>개의 객체를 만들고 있음을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>LcMdl_Create</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, &amp;m_pDXMeshOrg, m_pd3dDevice, m_strMeshFilename);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>LcMdl_Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>,
&amp;m_pDxMeshIns1, m_pd3dDevice, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, m_pDXMeshOrg); </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>LcMdl_Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>,
&amp;m_pDxMeshIns2, m_pd3dDevice, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, m_pDXMeshOrg);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>LcMdl_Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>,
&amp;m_pDxMeshIns3, m_pd3dDevice, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, m_pDXMeshOrg);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>LcMdl_Create() </span>함수는 애니메이션이 없는<span
lang=EN-US> X-file</span>와 비슷하게 파일이름이 있으면 원본 객체를 만들고 원본 객체의 주소가 오면 이를 참조하는 객체를 만듭니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>LcMdl_Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sCmd , </span><span
lang=EN-US style='color:blue'>ILcMdl</span><span lang=EN-US>** pData </span><span
lang=EN-US style='color:green'>// Output Data</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;,
</span><span lang=EN-US style='color:blue'>void</span><span lang=EN-US>* p1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Device</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;,
</span><span lang=EN-US style='color:blue'>void</span><span lang=EN-US>* p2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// File Name</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;,
</span><span lang=EN-US style='color:blue'>void</span><span lang=EN-US>* p3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Source Model</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;,
</span><span lang=EN-US style='color:blue'>void</span><span lang=EN-US>* p4 )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>ILcMdl</span><span lang=PT-BR>* pObj = </span><span
lang=PT-BR style='color:#A000A0'>NULL</span><span lang=PT-BR>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pData
= </span><span lang=PT-BR style='color:#A000A0'>NULL</span><span lang=PT-BR>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US> != p2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pObj
= </span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>CLcXSkinSrc</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US> != p3)&nbsp;&nbsp;&nbsp; pObj
= </span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>CLcXSkinIns</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else&nbsp;&nbsp;&nbsp; </span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>FAILED</span><span lang=EN-US>(pObj-&gt;</span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(p1, p2, p3,
p4)))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>delete</span><span lang=PT-BR> pObj;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>return</span><span lang=PT-BR> -</span><span
lang=PT-BR style='color:red'>1</span><span lang=PT-BR>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pData
= pObj;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이 <span lang=EN-US><a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux08_skinning02.zip">daux08_skinning02.zip</a></span>를 실행하면 다음과 같이 서로 다른
시간에 애니메이션을 하는<span lang=EN-US> 3</span>개의 객체를 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=272 height=204 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image055.gif">&nbsp;<img border=0
width=272 height=204 SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image056.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Modified
SkinnedMesh: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux08_skinning02.zip">daux08_skinning02.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>코드를 전환하면서 가장 어려웠던 것은 데이터의 갱신과 렌더링이 분리가 안되어 있는 점과 애니메이션 설정이 쉽지가
않다는 것입니다<span lang=EN-US>. Animation Set</span>이 여러 개 있을 경우<span lang=EN-US> 0</span>번<span
lang=EN-US> Set</span>으로 두면 다른 객체에 영향을 주어 할 수 없이 마지막<span lang=EN-US> Set</span>으로
애니메이션을 결정해야 했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(m_nAniMax)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pAC-&gt;</span><span
lang=EN-US style='color:#880000'>SetTrackAnimationSet</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_vAS[m_nAniMax - </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>]);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>완벽하지는 않지만 제대로 된 라이브러리를 얻기 전까지 쓸만하다고
생각되며<span lang=EN-US>, </span>특히 애니메이션을 처음 접하는 분들에게 도움이 되리라 생각됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3.9 2D Sprite</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.9.1 RHW Sprite</span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>기초와 게임 프로그램에 필요한 애니메이션까지의 지식만으로도<span
lang=EN-US> 3D </span>게임을 얼마든지 만들 수 있습니다<span lang=EN-US>. </span>그런데 대부분<span
lang=EN-US> 3D</span>를 배워놓고도 무엇을 해야 할지 막막할 때가 많이 있습니다<span lang=EN-US>. </span>이럴
때 권하고 싶은 것이<span lang=EN-US> ID3DXSprite</span>를<span lang=EN-US> 3D</span>로 만들어
보는 것입니다<span lang=EN-US>. 3D </span>게임에서 화면의<span lang=EN-US> UI(User
Interface)</span>를 구성할 때 <span lang=EN-US>2D Sprite</span>를 사용하고<span
lang=EN-US> ID3DXSprite</span>를 대부분 사용합니다<span lang=EN-US>. </span>그런데<span
lang=EN-US> ID3DXSprite</span>라는 것이<span lang=EN-US> D3D </span>또는<span
lang=EN-US> D3DX </span>버전 마다 약간의 차이가 있습니다<span lang=EN-US>. </span>만약<span
lang=EN-US> 3D</span>로<span lang=EN-US> 2D Sprite</span>를 구현해 놓으면<span
lang=EN-US> D3D </span>버전에도 영향을 받지 않고 완벽하게<span lang=EN-US> 3D</span>로<span
lang=EN-US> 2D</span>를 구현 하는데 의미가 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>3D</span>는 정점이 있어야 장면을 연출할 수 있으며 따라서<span
lang=EN-US> 2D</span>도 정점이 있어야 합니다<span lang=EN-US>. </span>파이프라인의 변환 과정을 거치지 않는
가장 적합한 형태는<span lang=EN-US> RHW(Reciprocal of Homogeneous W) </span>형태로 정점을 구성하는
것입니다<span lang=EN-US>. </span>프로그램의 인터페이스는<span lang=EN-US> D3D</span>와 유사하게 구성하는
것이 지금까지 만든 프로그램과 호환성을 유지에 도움이 됩니다<span lang=EN-US>. </span>이런 아이디어를 종합해서 프로그램을 작성해
봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>먼저 <span lang=EN-US>2D Sprite</span>의 인터페이스와<span
lang=EN-US> Sprite </span>객체를 생성하는 함수 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>interface</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>ILcSprite</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 2D Sprite Interface</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> ~</span><span
lang=EN-US style='color:blue'>ILcSprite</span><span lang=EN-US>(){};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Draw</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pTx0, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>RECT</span><span lang=EN-US>* pRcDrw=</span><span
lang=EN-US style='color:#A000A0'>NULL</span></p>

<p class=MsoNormal style='margin-left:120.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>, </span><span lang=EN-US style='color:blue'>const</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>* pvcPos=</span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US> Color=</span><span lang=EN-US style='color:red'>0xFFFFFFFF</span><span
lang=EN-US>)=</span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>LcxCreateSprite</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>ILcSprite</span><span lang=EN-US>** pOut, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pd3dDevice);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Sprite </span>객체를 생성하는 <span lang=EN-US>LcxCreateSprite()
</span>함수에서 객체에 대한 반환을 인수의 앞쪽에 넣었습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>CLcSprite </span>클래스는<span lang=EN-US>
ILcSprite</span>를 상속받아서 실제로<span lang=EN-US> Draw() </span>함수를 처리하는 클래스입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcSprite</span><span lang=EN-US> : </span><span lang=EN-US
style='color:blue'>public</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>ILcSprite</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DDEVICE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DSTATEBLOCK9</span><span lang=EN-US>&nbsp; m_pStCur;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Current State Block</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DSTATEBLOCK9</span><span lang=EN-US>&nbsp; m_pStSpt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Sprite State Block</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>LPDIRECT3DDEVICE9</span><span lang=EN-US> pDev);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Draw</span><span lang=EN-US>(…);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Sprite </span>객체에 의해 디바이스의 상태 값이 변하지 않도록 상태를
저장하기 위해서<span lang=EN-US> D3D</span>의<span lang=EN-US> State Block </span>객체를 가지고
있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이<span lang=EN-US> State Block </span>객체 생성은<span
lang=EN-US> D3D </span>디바이스의<span lang=EN-US> BeginStateBlock()</span>함수 호출을 하면서
저장할 상태를 설정하고 마지막에<span lang=EN-US> EndStateBlock() </span>함수에서 객체를 생성합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>BeginStateBlock</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DRS_FOGENABLE</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FALSE</span><span lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DRS_LIGHTING</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FALSE</span><span lang=EN-US> );</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>EndStateBlock</span><span lang=EN-US>(&amp;m_pStSpt);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>상태 설정이 길어질 때 유용합니다<span lang=EN-US>. </span>이<span
lang=EN-US> State Block</span>도 해제할 때는<span lang=EN-US> Release() </span>함수를 이용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Draw() </span>함수는 원본 이미지의 크기와 화면에 그리게 될 이미지
영역<span lang=EN-US>, </span>화면 좌표<span lang=EN-US>, </span>색상을 이용해서<span
lang=EN-US> 4</span>개의 정점을 완성하고 출력하는 것입니다<span lang=EN-US>. </span>텍스처 서피스에서 너비와
높이를 가져올 수 있고 이와 함께 화면에 출력할 이미지의 영역을 이용해서 텍스처의<span lang=EN-US> UV</span>좌표를 계산합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcSprite</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Draw</span><span lang=EN-US>(…, </span><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>RECT</span><span lang=EN-US>* pRcImg, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>RECT</span><span lang=EN-US>* pRcDrw, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>* pvcPos, …)</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:green'>// </span><span style='color:green'>서피스의<span
lang=EN-US> Width, Height</span>를 가져온다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DSURFACE_DESC</span><span lang=EN-US> dsc;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pTex0-&gt;</span><span
lang=EN-US style='color:#880000'>GetLevelDesc</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, &amp;dsc);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> fImgW = </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>(dsc.Width);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Width of Surface</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> fImgH = </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>(dsc.Height);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Height of Surface</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Draw Region Width, Height</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pRcDrw)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fDrwL
= </span><span lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>(pRcDrw-&gt;left);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fDrwT
= </span><span lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>(pRcDrw-&gt;top);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fDrwW
= </span><span lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>(pRcDrw-&gt;right
- pRcDrw-&gt;left);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fDrwH
= </span><span lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>(pRcDrw-&gt;bottom-
pRcDrw-&gt;top );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Setup UV</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uv0.x
= (fDrwL +&nbsp; &nbsp;&nbsp;&nbsp;</span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>)/fImgW;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uv1.x
= (fDrwL + fDrwW)/fImgW;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uv0.y
= (fDrwT +&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>)/fImgH;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uv1.y
= (fDrwT + fDrwH)/fImgH;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:green'>// Setup Vertices</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>struct</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>TVtxRHWUV1</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; p[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp; d;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; u, v;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
pVtx[</span><span lang=EN-US style='color:red'>4</span><span lang=EN-US>] =</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {pos.x
+&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, pos.y +&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,&nbsp; dColor,&nbsp; &nbsp;uv0.x,&nbsp;
uv0.y},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {pos.x
+ fDrwW, pos.y +&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,&nbsp; dColor,&nbsp;&nbsp;
uv1.x,&nbsp; uv0.y},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {pos.x
+ fDrwW, pos.y + fDrwH,&nbsp; </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>,&nbsp; </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>,&nbsp; dColor,&nbsp;&nbsp; uv1.x,&nbsp; uv1.y},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {pos.x
+&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, pos.y + fDrwH,&nbsp; </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>,&nbsp; </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>,&nbsp; dColor,&nbsp;&nbsp; uv0.x,&nbsp; uv1.y},</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Rendering 2D</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pStCur-&gt;</span><span
lang=EN-US style='color:#880000'>Capture</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pStSpt-&gt;</span><span
lang=EN-US style='color:#880000'>Apply</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, pTex0);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetFVF</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZRHW</span><span lang=EN-US>|</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_DIFFUSE</span><span lang=EN-US>|</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_TEX1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>DrawPrimitiveUP</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DPT_TRIANGLEFAN</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>, pVtx, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>TVtxRHWUV1</span><span lang=EN-US>) );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pStCur-&gt;</span><span
lang=EN-US style='color:#880000'>Apply</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>스프라이트 객체는 매번 정점을 설정해야 하므로<span lang=EN-US> User Memory
Pointer</span>를 사용하는 것이 편리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite01.zip">daux09_2d_sprite01.zip</a>
</span>참고 하고 이를 실행하면 다음과 같이<span lang=EN-US> ID3DXSprite </span>객체와 비교한 화면이 출력됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image057.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;RHW Sprite: daux09_2d_sprite01.zip&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그림의 작은 입자의 붉은 색 동그라미를 보면<span lang=EN-US> UV</span>가 안 맞는 것이
보입니다<span lang=EN-US>. </span>이것은 텍스처를 만들 때 필터링이 설정되었기 때문입니다<span lang=EN-US>. </span>또한
불투명 텍스처에 대한 칼라 키<span lang=EN-US>(Color Key)</span>가 설정이 안 되어 있어서 검정색 배경 색상이 그대로
출력되고 있음을 볼 수 있습니다<span lang=EN-US>. </span>이런 문제들을 생각했을 때 지금까지 잘 사용하고 있었던 <span
lang=EN-US style='color:blue'>IDirect3DTexture9</span><span lang=EN-US> </span>객체
주소와 <span lang=EN-US style='color:blue'>D3DXIMAGE_INFO</span><span lang=EN-US> </span>구조체
변수를<span lang=EN-US> Wrapping </span>해서 사용할 수 있는 인터페이스가 필요하게 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음과 같이 간단한 구조체로 만들어서 사용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcTexture</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXIMAGE_INFO</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pInf;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; pTex;</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>한 번 해 놓으면 계속 쓸 수 있으니 이왕이면 다음과 같이 작성하는 것이 좋습니다<span
lang=EN-US>. </span>먼저 인터페이스와 생성 함수를 이전의<span lang=EN-US> Sprite</span>와 비슷하게 만듭니다<span
lang=EN-US>. ILcTexture </span>생성 함수에는 필터링<span lang=EN-US>, </span>칼라 키를 전달할 수
있는 인수를 추가합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>interface</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>ILcTexture</span><span lang=EN-US> </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> ~</span><span
lang=EN-US style='color:blue'>ILcTexture</span><span lang=EN-US>(){};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>*&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetTexture</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// LPDIRECT3DTEXTURE9</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetImgW</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Image Width</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetImgH</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Image Height</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GetImgD</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Image Depth</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INT</span><span
lang=EN-US> </span><span lang=EN-US style='color:#880000'>LcxCreateTextureFromFile</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>ILcTexture</span><span
lang=EN-US>** pOut, </span><span lang=EN-US style='color:blue'>void</span><span
lang=EN-US>* pd3dDevice</span></p>

<p class=MsoNormal style='margin-left:80.0pt;text-indent:40.0pt'><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>char</span><span
lang=EN-US>* sFile, </span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US> dFilter=-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US> dColor=</span><span lang=EN-US style='color:red'>0x00FFFFFF</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>인터페이스<span lang=EN-US> ILcTexture</span>를 구현할 클래스<span
lang=EN-US> CLcTexture</span>를 다음과 같이 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcTexture</span><span lang=EN-US> : </span><span
lang=EN-US style='color:blue'>public</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ILcTexture</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_pTex;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXIMAGE_INFO</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pInf;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>LPDIRECT3DDEVICE9</span><span lang=EN-US> pDev, </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sFile</span></p>

<p class=MsoNormal style='margin-left:120.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>, </span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US> dFilter=-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US> dColorKey=</span><span lang=EN-US style='color:red'>0x00FFFFFF</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>CLcTexture::Create() </span>함수는 <span
lang=EN-US>D3DXCreateTextureFromFileEx() </span>함수를 이용해서 텍스처와 원본 이미지 정보를 저장합니다<span
lang=EN-US>. </span>필터가<span lang=EN-US> -1</span>이면<span lang=EN-US> MipLevels</span>를
최대로 설정하고 그렇지 않은 경우에는<span lang=EN-US> 1</span>로 설정해서<span lang=EN-US> 2D</span>환경에서
사용되지 않는<span lang=EN-US> Sub Texture</span>를 안 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcTexture</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Create</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>…</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US> MipLevels = (dFilter==-</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>? -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> : </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXCreateTextureFromFileEx</span><span
lang=EN-US>(pDev, sFile</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>D3DX_DEFAULT</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DX_DEFAULT</span></p>

<p class=MsoNormal style='margin-left:120.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>, MipLevels, </span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>D3DFMT_UNKNOWN</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DPOOL_MANAGED</span></p>

<p class=MsoNormal style='margin-left:120.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>, dFilter, dFilter</span></p>

<p class=MsoNormal style='margin-left:120.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>, dColorKey, &amp;m_pInf, </span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US>, &amp;m_pTex);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite02.zip">daux09_2d_sprite02.zip</a></span>를
실행 하면 다음과 같이<span lang=EN-US> Lc, DX </span>모두 원하는 대로 출력하고 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image058.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;RHW Sprite: <a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite02.zip">daux09_2d_sprite02.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.9.2 </span><span
style='font-size:14.0pt'>회전 변환</span></p>

<p class=MsoNormal><span lang=EN-US>2D </span>회전을 결정하는 것이 쉬우면서도 어렵습니다<span
lang=EN-US>. </span>그것은<span lang=EN-US> Sprite</span>의 활용에 따라 달라집니다<span
lang=EN-US>. </span>만약 빌보드 효과<span lang=EN-US>(Billboard Effect)</span>과 같은<span
lang=EN-US> 3D</span>에서<span lang=EN-US> 2</span>차원 평면을 위한 것이라면<span
lang=EN-US> Sprite</span>의 회전은<span lang=EN-US> 3D </span>변환 과정과 동일해야 합니다<span
lang=EN-US>. </span>그렇지 않고 화면에만 맞춘다면<span lang=EN-US> 2</span>차원 회전만 고려하면 됩니다<span
lang=EN-US>. </span>여기서는 화면을 기준으로 회전을 적용하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>회전 각도<span lang=EN-US>(Radian)</span>를 θ로 하면 회전 전 좌표를<span
lang=EN-US> (x, y)</span>라 하고 회전 후 좌표를<span lang=EN-US> (x', y') </span>위치 변환은 다음과
같이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoTableGrid border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=259 style='width:194.4pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><i><span lang=EN-US>x' = x * cos</span>θ<span lang=EN-US>
  - y * sin</span>θ</i></p>
  <p class=MsoNormal><i><span lang=EN-US>y' = x * sin</span>θ<span lang=EN-US>
  + y * cos</span>θ</i></p>
  <p class=MsoNormal><span lang=EN-US>&lt;</span>오른손 좌표계<span lang=EN-US>&gt;</span></p>
  </td>
  <td width=228 style='width:171.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><i><span lang=EN-US>x' =&nbsp; x * cos</span>θ<span
  lang=EN-US> + y * sin</span>θ</i></p>
  <p class=MsoNormal><i><span lang=EN-US>y' = -x * sin</span>θ<span lang=EN-US>
  + y * cos</span>θ</i></p>
  <p class=MsoNormal><span lang=EN-US>&lt;</span>왼손 좌표계<span lang=EN-US>&gt;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 회전 중심 축이 있다면 위치를 이 중심축만큼 이동하고 나서 회전을 적용한 다음 다시 원래의 위치로 와야
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>Δ<span lang=EN-US>x = x- rot x, </span>Δ<span lang=EN-US>y
= x- rot y</span></i></p>

<p class=MsoNormal><i><span lang=EN-US>&nbsp;</span></i></p>

<p class=MsoNormal><i>Δ<span lang=EN-US>x' = </span>Δ<span lang=EN-US>x * cos</span>θ<span
lang=EN-US> - </span>Δ<span lang=EN-US>y * sin</span>θ</i></p>

<p class=MsoNormal><i>Δ<span lang=EN-US>y' = </span>Δ<span lang=EN-US>x * sin</span>θ<span
lang=EN-US> + </span>Δ<span lang=EN-US>y * cos</span>θ</i></p>

<p class=MsoNormal><i><span lang=EN-US>&nbsp;</span></i></p>

<table class=MsoTableGrid border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=187 style='width:140.4pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><i><span lang=EN-US>x' = </span>Δ<span lang=EN-US>x' + rot
  x</span></i></p>
  <p class=MsoNormal><i><span lang=EN-US>y' = </span>Δ<span lang=EN-US>y' + rot
  y</span></i></p>
  </td>
  <td width=312 style='width:234.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>또는<i><span lang=EN-US> (x' y') = rot(x, y) + (</span>Δ<span
  lang=EN-US>x', </span>Δ<span lang=EN-US>y')</span></i></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite03.zip">daux09_2d_sprite03.zip</a>
</span>의 <span lang=EN-US>CLcSprite::Draw()</span>는 이러한 회전을 적용한 함수로 코드의 중간에 회전 중심
축이 주어지면 이를 구현하고 있습니다<span lang=EN-US>. </span>회전은 반 시계방향으로 회전하도록 하기 위해서 왼손 좌표계 공식을
적용했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(pvcRot)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR2</span><span lang=EN-US> vcR = </span><span
lang=EN-US style='color:blue'>D3DXVECTOR2</span><span lang=EN-US>(pvcRot[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], pvcRot[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>]);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR2</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>d</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; fCos = </span><span
lang=EN-US style='color:#880000'>cosf</span><span lang=EN-US>(fTheta);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; fSin = </span><span
lang=EN-US style='color:#880000'>sinf</span><span lang=EN-US>(fTheta);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR2</span><span lang=EN-US> vcT = pos[i]
- vcR;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d.x
= vcT.x * fCos + vcT.y * fSin;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d.y
=-vcT.x * fSin + vcT.y * fCos;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos[i]
= vcR + d;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>각도는<span lang=EN-US> D3D</span>는<span lang=EN-US> Radian [0,
2</span>π<span lang=EN-US>]</span>을 사용하나<span lang=EN-US> Degree [0, 360] </span>가
많이 사용되므로 입력 값은<span lang=EN-US> Degree</span>로 하고 내부에서<span lang=EN-US> Radian</span>으로
처리하도록 합니다<span lang=EN-US>. </span></p>

<p class=MsoNormal>다음 그림은 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite03.zip">daux09_2d_sprite03.zip</a>
</span>실행 결과입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=398 height=227
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image059.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>회전이 적용된<span lang=EN-US>
2D&nbsp; Sprite: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite03.zip">daux09_2d_sprite03.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.9.3 </span><span
style='font-size:14.0pt'>크기 변환</span></p>

<p class=MsoNormal>크기 변환도 회전처럼 화면 기준으로 작성합니다<span lang=EN-US>. </span>만약 크기에 음수가
오면 좌우<span lang=EN-US>, </span>또는 상하를 반대로 뒤 짚어 줍니다<span lang=EN-US>. </span>반전이
있으면 삼각형을 그리는 정점의 순서가<span lang=EN-US> CW</span>에서<span lang=EN-US> CCW</span>로 바뀝니다<span
lang=EN-US>. </span>따라서<span lang=EN-US> Culling Mode</span>를<span lang=EN-US>
None</span>으로 하는 것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetRenderState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DRS_CULLMODE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DCULL_NONE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXSprite</span>는 크기 변환 값을 음수로 설정하면 위치를 보정해야
합니다<span lang=EN-US>. </span>이것은 불편하므로 반전이 있어도 시작 위치를 변동시키지 않도록 코드에서 정점의 위치에 대한
계산을 다음과 같이 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; fSclX = pvcScl[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; fSclY =
pvcScl[</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(fSclX&lt;</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos[</span><span
lang=PT-BR style='color:red'>1</span><span lang=EN-US>].x = pos[</span><span
lang=PT-BR style='color:red'>0</span><span lang=EN-US>].x;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos[</span><span
lang=PT-BR style='color:red'>2</span><span lang=EN-US>].x = pos[</span><span
lang=PT-BR style='color:red'>1</span><span lang=EN-US>].x;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos[</span><span
lang=PT-BR style='color:red'>0</span><span lang=EN-US>].x = pos[</span><span
lang=PT-BR style='color:red'>1</span><span lang=EN-US>].x - fDrwW * fSclX;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>].x = pos[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>].x;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(fSclY&lt;</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>].y = pos[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>].y;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>].y = pos[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>].y;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>].y = pos[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>].y - fDrwH * fSclY;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>].y = pos[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>].y;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite04.zip">daux09_2d_sprite04.zip</a></span>을
참고 하기바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image060.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>크기 변환<span lang=EN-US>: <a
href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite04.zip">daux09_2d_sprite04.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.9.4 </span><span
style='font-size:14.0pt'>알파 맵<span lang=EN-US>(Alpha Map)</span></span></p>

<p class=MsoNormal><span lang=EN-US>Sprite</span>에 기능을 넣기 시작하면 한도 끝도 없을 정도로 무궁무진
합니다<span lang=EN-US>. </span>그래도 한가지 넣고 싶은 것이 있다면 알파 맵을 넣는 것입니다<span
lang=EN-US>. </span>이 기능은 다음과 같이 원본 이미지에서 특정한 부분을 잘라내거나 아니면 반투명을 처리하는 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=303 height=227
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image061.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;2D Sprite </span>알파 맵에 의한 특정 영역의 출력<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것은<span lang=EN-US> 3D</span>의 다중 텍스처<span lang=EN-US>(Multi-Texturing)</span>을
적용하면 아주 쉽게 해결이 됩니다<span lang=EN-US>. </span>다음과 같이 다중 텍스처 처리 단계<span
lang=EN-US> 1</span>에서는 단계<span lang=EN-US> 0</span>의 결과 값을<span lang=EN-US>
Current</span>로 저장하고 색상은 그대로 출력합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTA_CURRENT</span><span lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLOROP</span><span lang=EN-US>,&nbsp;&nbsp;
</span><span lang=EN-US style='color:#A000A0'>D3DTOP_SELECTARG1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>알파만<span lang=EN-US> Current</span>값과
곱셈을 하고 출력합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_ALPHAARG1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTA_CURRENT</span><span lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_ALPHAARG2</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTA_TEXTURE</span><span lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_ALPHAOP</span><span lang=EN-US>,&nbsp;&nbsp;
</span><span lang=EN-US style='color:#A000A0'>D3DTOP_SELECTARG2</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>텍스처 좌표는 단계<span lang=EN-US> 0</span>에서
사용한 좌표를 그대로 사용합니다<span lang=EN-US>. </span>이 부분은 이 후<span lang=EN-US> Sprite</span>의
기능 보강에서 필요하다면 수정하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetTextureStageState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_TEXCOORDINDEX</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>물론<span lang=EN-US> Draw() </span>함수도 수정해야 합니다<span
lang=EN-US>. </span>이전의<span lang=EN-US> Draw() </span>함수와 구분하기 위해서 새로운<span
lang=EN-US> DrawEx() </span>함수를 만드는 것이 좋습니다<span lang=EN-US>. </span>그리고 이전<span
lang=EN-US> Draw()</span>함수는<span lang=EN-US> DrawEx()</span>를 호출해서 사용하도록 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcSprite</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Draw</span><span lang=EN-US>(…)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>DrawEx</span><span lang=EN-US>(pTx0, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, …);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite05.zip">daux09_2d_sprite05.zip</a></span>는
알파 맵을 적용한<span lang=EN-US> Sprite </span>예제입니다<span lang=EN-US>. </span>실행하면 다음과
같은 화면을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
SRC="https://github.com/3dapi/bs23_3d_aux/raw/master/bs23_3d_aux.files/image062.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>알파 맵이 있는<span lang=EN-US> 2D
Sprite: <a href="https://github.com/3dapi/bs23_3d_aux/raw/master/daux09_2d_sprite05.zip">daux09_2d_sprite05.zip</a>&gt;</span></p>
<br>
<br>

</div>

<?php
	include '../base/lc_tail.php';
?>
